bin/#th_analyser_x.cc#:  Int_t   njt=0;                   otree->Branch("njt",           &njt,                       "njt/I");
bin/#th_analyser_x.cc#:  Int_t   njt10=0;                 otree->Branch("njt10",           &njt10,                       "njt10/I");
bin/#th_analyser_x.cc#:  Float_t jtpt[140]={-99};         otree->Branch("jtpt",          jtpt,                 "jtpt[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtrawpt[140]={-99};      otree->Branch("jtrawpt",       jtrawpt,           "jtrawpt[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jteta[140]={-99};        otree->Branch("jteta",         jteta,               "jteta[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtphi[140]={-99};        otree->Branch("jtphi",         jtphi,               "jtphi[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jte[140]={-99};          otree->Branch("jte",           jte,                   "jte[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t sumHt = -99;             otree->Branch("sumHt",         &sumHt,                   "sumHt/F");
bin/#th_analyser_x.cc#:  Short_t jtgenflv[140]={-99};     otree->Branch("jtgenflv",      jtgenflv,         "jtgenflv[njt10]/S");
bin/#th_analyser_x.cc#:  Float_t jtgenpt[140]={-99};      otree->Branch("jtgenpt",       jtgenpt,           "jtgenpt[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtgeneta[140]={-99};     otree->Branch("jtgeneta",      jtgeneta,         "jtgeneta[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtgenphi[140]={-99};     otree->Branch("jtgenphi",      jtgenphi,         "jtgenphi[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtgene[140]={-99};       otree->Branch("jtgene",        jtgene,             "jtgene[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvt[140]={-99};       otree->Branch("jtcsvt",        jtcsvt,             "jtcsvt[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvtcorr[140][5];      otree->Branch("jtcsvtcorr",    jtcsvtcorr,  "jtcsvtcorr[njt10][5]/F"); 
bin/#th_analyser_x.cc#:  Float_t jtcsvtcorr4p[140][4];    otree->Branch("jtcsvtcorr4p",  jtcsvtcorr4p,"jtcsvtcorr[njt10][4]/F"); 
bin/#th_analyser_x.cc#:  Float_t jtntracks[140]={-99};    otree->Branch("jtntracks",     jtntracks,        "jtntracks[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtarea[140]={-99};       otree->Branch("jtarea",        jtarea,             "jtarea[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtpull[140]={-99};       otree->Branch("jtpull",        jtpull,             "jtpull[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcharge[140]={-99};     otree->Branch("jtcharge",      jtcharge,         "jtcharge[njt10]/F");
bin/#th_analyser_x.cc#:  Bool_t  jtid[140]={0};           otree->Branch("jtid",          jtid,                 "jtid[njt10]/O");
bin/#th_analyser_x.cc#:  Float_t jtchhadmult[140]={-99};  otree->Branch("jtchhadmult",   jtchhadmult,   "jtchhadmult[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvsf_l[140]={-99};    otree->Branch("jtcsvsf_l",     jtcsvsf_l,       "jtcsvsf_l[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvsf_m[140]={-99};    otree->Branch("jtcsvsf_m",     jtcsvsf_m,       "jtcsvsf_m[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvsf_t[140]={-99};    otree->Branch("jtcsvsf_t",     jtcsvsf_t,       "jtcsvsf_t[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvsf_lerr[140]={-99}; otree->Branch("jtcsvsf_lerr",  jtcsvsf_lerr, "jtcsvsf_lerr[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvsf_merr[140]={-99}; otree->Branch("jtcsvsf_merr",  jtcsvsf_merr, "jtcsvsf_merr[njt10]/F");
bin/#th_analyser_x.cc#:  Float_t jtcsvsf_terr[140]={-99}; otree->Branch("jtcsvsf_terr",  jtcsvsf_terr, "jtcsvsf_terr[njt10]/F");
bin/#th_analyser_x.cc#:  Int_t   nlmu;                    otree->Branch("nlmu",          &nlmu,                     "nlmu/I");
bin/#th_analyser_x.cc#:  Float_t lmupt[110]={-99};        otree->Branch("lmupt",         lmupt,              "lmupt[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t lmueta[110]={-99};       otree->Branch("lmueta",        lmueta,            "lmueta[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t lmuphi[110]={-99};       otree->Branch("lmuphi",        lmuphi,            "lmuphi[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t lmuiso[110]={-99};       otree->Branch("lmuiso",        lmuiso,            "lmuiso[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t lmuiso_dBeta[110]={-99}; otree->Branch("lmuiso_dBeta",  lmuiso_dBeta,"lmuiso_dBeta[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t lmue[110]={-99};         otree->Branch("lmue",          lmue,                "lmue[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t lmucharge[110]={-99};    otree->Branch("lmucharge",     lmucharge,      "lmucharge[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t musigid[110]={-99};      otree->Branch("musigid",       musigid,          "musigid[nlmu]/F");
bin/#th_analyser_x.cc#:  Float_t muvetoid[110]={-99};     otree->Branch("muvetoid",      muvetoid,        "muvetoid[nlmu]/F");
bin/#th_analyser_x.cc#:  Int_t   nvetomu={-99};           otree->Branch("nvetomu",       &nvetomu,               "nvetomu/I");
bin/#th_analyser_x.cc#:  Int_t   nmu={-99};               otree->Branch("nmu",           &nmu,                       "nmu/I");
bin/#th_analyser_x.cc#:  Float_t mupt[110]={-99};         otree->Branch("mupt",          mupt,                 "mupt[nmu]/F");
bin/#th_analyser_x.cc#:  Float_t mueta[110]={-99};        otree->Branch("mueta",         mueta,               "mueta[nmu]/F");
bin/#th_analyser_x.cc#:  Float_t muphi[110]={-99};        otree->Branch("muphi",         muphi,               "muphi[nmu]/F");
bin/#th_analyser_x.cc#:  Float_t muiso[110]={-99};        otree->Branch("muiso",         muiso,               "muiso[nmu]/F");
bin/#th_analyser_x.cc#:  Float_t mue[110]={-99};          otree->Branch("mue",           mue,                   "mue[nmu]/F");
bin/#th_analyser_x.cc#:  Float_t mucharge[110]={-99};     otree->Branch("mucharge",      mucharge,         "mucharge[nmu]/F");
bin/#th_analyser_x.cc#:  Int_t   nlel;                    otree->Branch("nlel",          &nlel,                     "nlel/I");
bin/#th_analyser_x.cc#:  Float_t lelpt[110]={-99};        otree->Branch("lelpt",         lelpt,              "lelpt[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t leleta[110]={-99};       otree->Branch("leleta",        leleta,            "leleta[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t lelphi[110]={-99};       otree->Branch("lelphi",        lelphi,            "lelphi[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t leliso[110]={-99};       otree->Branch("leliso",        leliso,            "leliso[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t leliso2[110]={-99};      otree->Branch("leliso2",       leliso2,          "leliso2[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t lele[110]={-99};         otree->Branch("lele",          lele,                "lele[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t lelcharge[110]={-99};    otree->Branch("lelcharge",     lelcharge,      "lelcharge[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t lelmvaid[110]={-99};     otree->Branch("lelmvaid",      lelmvaid,        "lelvmaid[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t  lelconv[110]={-99};     otree->Branch("lelconv",       lelconv,          "lelconv[nlel]/F");
bin/#th_analyser_x.cc#:  Int_t   nvetoel={-99};           otree->Branch("nvetoel",       &nvetoel,               "nvetoel/I");
bin/#th_analyser_x.cc#:  Int_t   nel={-99};               otree->Branch("nel",           &nel,                       "nel/I");
bin/#th_analyser_x.cc#:  Float_t elpt[110]={-99};         otree->Branch("elpt",          elpt,                 "elpt[nel]/F");
bin/#th_analyser_x.cc#:  Float_t eleta[110]={-99};        otree->Branch("eleta",         eleta,               "eleta[nel]/F");
bin/#th_analyser_x.cc#:  Float_t elphi[110]={-99};        otree->Branch("elphi",         elphi,               "elphi[nel]/F");
bin/#th_analyser_x.cc#:  Float_t eliso[110]={-99};        otree->Branch("eliso",         eliso,               "eliso[nel]/F");
bin/#th_analyser_x.cc#:  Float_t ele[110]={-99};          otree->Branch("ele",           ele,                   "ele[nel]/F");
bin/#th_analyser_x.cc#:  Float_t elcharge[110]={-99};     otree->Branch("elcharge",      elcharge,         "elcharge[nel]/F");
bin/#th_analyser_x.cc#:  Float_t elmvaid[110]={-99};      otree->Branch("elmvaid",       elmvaid,           "elvmaid[nel]/F");
bin/#th_analyser_x.cc#:  Float_t elsigid[110]={-99};      otree->Branch("elsigid",       elsigid,          "elsigid[nlel]/F");  
bin/#th_analyser_x.cc#:  Float_t elvetoid[110]={-99};     otree->Branch("elvetoid",      elvetoid,        "elvetoid[nlel]/F");
bin/#th_analyser_x.cc#:  Float_t Hpt={-99};               otree->Branch("Hpt",           &Hpt,                       "Hpt/F");
bin/#th_analyser_x.cc#:  Float_t Heta={-99};              otree->Branch("Heta",          &Heta,                     "Heta/F");
bin/#th_analyser_x.cc#:  Float_t Hphi={-99};              otree->Branch("Hphi",          &Hphi,                     "Hphi/F");
bin/#th_analyser_x.cc#:  Float_t Hm={-99};                otree->Branch("Hm",            &Hm,                         "Hm/F");
bin/#th_analyser_x.cc#:  Float_t Wpt={-99};               otree->Branch("Wpt",           &Wpt,                       "Wpt/F");
bin/#th_analyser_x.cc#:  Float_t Weta={-99};              otree->Branch("Weta",          &Weta,                     "Weta/F");
bin/#th_analyser_x.cc#:  Float_t Wphi={-99};              otree->Branch("Wphi",          &Wphi,                     "Wphi/F");
bin/#th_analyser_x.cc#:  Float_t Wm={-99};                otree->Branch("Wm",            &Wm,                         "Wm/F");
bin/#th_analyser_x.cc#:  Float_t tpt={-99};               otree->Branch("tpt",           &tpt,                       "tpt/F");
bin/#th_analyser_x.cc#:  Float_t teta={-99};              otree->Branch("teta",          &teta,                     "teta/F");
bin/#th_analyser_x.cc#:  Float_t tphi={-99};              otree->Branch("tphi",          &tphi,                     "tphi/F");
bin/#th_analyser_x.cc#:  Float_t tm={-99};                otree->Branch("tm",            &tm,                         "tm/F");
bin/#th_analyser_x.cc#:  Float_t btoppt={-99};            otree->Branch("btoppt",        &btoppt,                 "btoppt/F");
bin/#th_analyser_x.cc#:  Float_t btopeta={-99};           otree->Branch("btopeta",       &btopeta,               "btopeta/F");
bin/#th_analyser_x.cc#:  Float_t btopphi={-99};           otree->Branch("btopphi",       &btopphi,               "btopphi/F");
bin/#th_analyser_x.cc#:  Float_t btopm={-99};             otree->Branch("btopm",         &btopm,                   "btopm/F");
bin/#th_analyser_x.cc#:  Float_t sbpt={-99};              otree->Branch("sbpt",          &sbpt,                     "sbpt/F");
bin/#th_analyser_x.cc#:  Float_t sbeta={-99};             otree->Branch("sbeta",         &sbeta,                   "sbeta/F");
bin/#th_analyser_x.cc#:  Float_t sbphi={-99};             otree->Branch("sbphi",         &sbphi,                   "sbphi/F");
bin/#th_analyser_x.cc#:  Float_t sbm={-99};               otree->Branch("sbm",           &sbm,                       "sbm/F");
bin/#th_analyser_x.cc#:  Float_t lqpt={-99};              otree->Branch("lqpt",          &lqpt,                     "lqpt/F");
bin/#th_analyser_x.cc#:  Float_t lqeta={-99};             otree->Branch("lqeta",         &lqeta,                   "lqeta/F");
bin/#th_analyser_x.cc#:  Float_t lqphi={-99};             otree->Branch("lqphi",         &lqphi,                   "lqphi/F");
bin/#th_analyser_x.cc#:  Float_t lqm={-99};               otree->Branch("lqm",           &lqm,                       "lqm/F");
bin/#th_analyser_x.cc#:  Float_t Hdaupt[2]={-99};         otree->Branch("Hdaupt",        Hdaupt,               "Hdaupt[2]/F");
bin/#th_analyser_x.cc#:  Float_t Hdaueta[2]={-99};        otree->Branch("Hdaueta",       Hdaueta,             "Hdaueta[2]/F");
bin/#th_analyser_x.cc#:  Float_t Hdauphi[2]={-99};        otree->Branch("Hdauphi",       Hdauphi,             "Hdauphi[2]/F");
bin/#th_analyser_x.cc#:  Float_t Hdaum[2]={-99};          otree->Branch("Hdaum",         Hdaum,                 "Hdaum[2]/F");
bin/#th_analyser_x.cc#:  Float_t Wdaupt[2]={-99};         otree->Branch("Wdaupt",        Wdaupt,               "Wdaupt[2]/F");
bin/#th_analyser_x.cc#:  Float_t Wdaueta[2]={-99};        otree->Branch("Wdaueta",       Wdaueta,             "Wdaueta[2]/F");
bin/#th_analyser_x.cc#:  Float_t Wdauphi[2]={-99};        otree->Branch("Wdauphi",       Wdauphi,             "Wdauphi[2]/F");
bin/#th_analyser_x.cc#:  Float_t Wdaum[2]={-99};          otree->Branch("Wdaum",         Wdaum,                 "Wdaum[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_tpt={-99};           otree->Branch("top_tpt",       &top_tpt,               "top_tpt/F");
bin/#th_analyser_x.cc#:  Float_t top_teta={-99};          otree->Branch("top_teta",      &top_teta,             "top_teta/F");
bin/#th_analyser_x.cc#:  Float_t top_tphi={-99};          otree->Branch("top_tphi",      &top_tphi,             "top_tphi/F");
bin/#th_analyser_x.cc#:  Float_t top_te={-99};            otree->Branch("top_te",        &top_te,                 "top_te/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarpt={-99};        otree->Branch("top_tbarpt",    &top_tbarpt,         "top_tbarpt/F");
bin/#th_analyser_x.cc#:  Float_t top_tbareta={-99};       otree->Branch("top_tbareta",   &top_tbareta,       "top_tbareta/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarphi={-99};       otree->Branch("top_tbarphi",   &top_tbarphi,       "top_tbarphi/F");
bin/#th_analyser_x.cc#:  Float_t top_tbare={-99};         otree->Branch("top_tbare",     &top_tbare,           "top_tbare/F");
bin/#th_analyser_x.cc#:  Float_t top_twpt={-99};          otree->Branch("top_twpt",      &top_twpt,             "top_twpt/F");
bin/#th_analyser_x.cc#:  Float_t top_tweta={-99};         otree->Branch("top_tweta",     &top_tweta,           "top_tweta/F");
bin/#th_analyser_x.cc#:  Float_t top_twphi={-99};         otree->Branch("top_twphi",     &top_twphi,           "top_twphi/F");
bin/#th_analyser_x.cc#:  Float_t top_twe={-99};           otree->Branch("top_twe",       &top_twe,               "top_twe/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwpt={-99};       otree->Branch("top_tbarwpt",   &top_tbarwpt,       "top_tbarwpt/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarweta={-99};      otree->Branch("top_tbarweta",  &top_tbarweta,     "top_tbarweta/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwphi={-99};      otree->Branch("top_tbarwphi",  &top_tbarwphi,     "top_tbarwphi/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwe={-99};        otree->Branch("top_tbarwe",    &top_tbarwe,         "top_tbarwe/F");
bin/#th_analyser_x.cc#:  Float_t top_twdaupt[2]={-99};          otree->Branch("top_twdaupt",      top_twdaupt,             "top_twdaupt[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_twdaueta[2]={-99};         otree->Branch("top_twdaueta",     top_twdaueta,           "top_twdaueta[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_twdauphi[2]={-99};         otree->Branch("top_twdauphi",     top_twdauphi,           "top_twdauphi[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_twdaue[2]={-99};           otree->Branch("top_twdaue",       top_twdaue,               "top_twdaue[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwdaupt[2]={-99};          otree->Branch("top_tbarwdaupt",      top_tbarwdaupt,             "top_tbarwdaupt[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwdaueta[2]={-99};         otree->Branch("top_tbarwdaueta",     top_tbarwdaueta,           "top_tbarwdaueta[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwdauphi[2]={-99};         otree->Branch("top_tbarwdauphi",     top_tbarwdauphi,           "top_tbarwdauphi[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarwdaue[2]={-99};           otree->Branch("top_tbarwdaue",       top_tbarwdaue,               "top_tbarwdaue[2]/F");
bin/#th_analyser_x.cc#:  Float_t top_tbpt={-99};          otree->Branch("top_tbpt",      &top_tbpt,             "top_tbpt/F");
bin/#th_analyser_x.cc#:  Float_t top_tbeta={-99};         otree->Branch("top_tbeta",     &top_tbeta,           "top_tbeta/F");
bin/#th_analyser_x.cc#:  Float_t top_tbphi={-99};         otree->Branch("top_tbphi",     &top_tbphi,           "top_tbphi/F");
bin/#th_analyser_x.cc#:  Float_t top_tbe={-99};           otree->Branch("top_tbe",       &top_tbe,               "top_tbe/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarbpt={-99};          otree->Branch("top_tbarbpt",      &top_tbarbpt,             "top_tbarbpt/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarbeta={-99};         otree->Branch("top_tbarbeta",     &top_tbarbeta,           "top_tbarbeta/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarbphi={-99};         otree->Branch("top_tbarbphi",     &top_tbarbphi,           "top_tbarbphi/F");
bin/#th_analyser_x.cc#:  Float_t top_tbarbe={-99};           otree->Branch("top_tbarbe",       &top_tbarbe,               "top_tbarbe/F");
bin/#th_analyser_x.cc#:  Float_t top_lepcharge={-99};     otree->Branch("top_lepcharge", &top_lepcharge,   "top_lepcharge/F");
bin/#th_analyser_x.cc#:  Float_t met={-99};               otree->Branch("met",           &met,                       "met/F");
bin/#th_analyser_x.cc#:  Float_t uncorrmet={-99};         otree->Branch("uncorrmet",     &uncorrmet,           "uncorrmet/F");
bin/#th_analyser_x.cc#:  Float_t metphi={-99};            otree->Branch("metphi",        &metphi,                 "metphi/F");
bin/#th_analyser_x.cc#:  Float_t uncorrmetphi={-99};      otree->Branch("uncorrmetphi",  &uncorrmetphi,     "uncorrmetphi/F");
bin/#th_analyser_x.cc#:  Float_t meteta={-99};            otree->Branch("meteta",        &meteta,                 "meteta/F");
bin/#th_analyser_x.cc#:  Float_t metx={-99};              otree->Branch("metx",          &metx,                     "metx/F");
bin/#th_analyser_x.cc#:  Float_t mety={-99};              otree->Branch("mety",          &mety,                     "mety/F");     
bin/#th_analyser_x.cc#:  Float_t metsig=-99;              otree->Branch("metsig",        &metsig,                 "metsig/F");
bin/#th_analyser_x.cc#:  Float_t metsumet=-99;            otree->Branch("metsumet",      &metsumet,             "metsumet/F");
bin/#th_analyser_x.cc#:  Float_t metsysx[2]={-99,-99};    otree->Branch("metsysx",       metsysx,             "metsysx[2]/F");
bin/#th_analyser_x.cc#:  Float_t metsysy[2]={-99,-99};    otree->Branch("metsysy",       metsysy,             "metsysy[2]/F");
bin/#th_analyser_x.cc#:  Float_t metsys[2]={-99,-99};     otree->Branch("metsys",        metsys,               "metsys[2]/F");
bin/#th_analyser_x.cc#:  UChar_t nlepw={-99};             otree->Branch("nlepw",         &nlepw,                   "nlepw/b");
bin/#th_analyser_x.cc#:  Float_t lepwm={-99};             otree->Branch("lepwm",         &lepwm,                   "lepwm/F");
bin/#th_analyser_x.cc#:  Float_t lepwpt={-99};            otree->Branch("lepwpt",        &lepwpt,                 "lepwpt/F");
bin/#th_analyser_x.cc#:  Float_t lepwphi={-99};           otree->Branch("lepwphi",       &lepwphi,               "lepwphi/F");
bin/#th_analyser_x.cc#:  Float_t lepweta={-99};           otree->Branch("lepweta",       &lepweta,               "lepweta/F");
bin/#th_analyser_x.cc#:  Float_t lepwet={-99};            otree->Branch("lepwet",        &lepwet,                 "lepwet/F");
bin/#th_analyser_x.cc#:  Float_t lepwmt={-99};            otree->Branch("lepwmt",        &lepwmt,                 "lepwmt/F");
bin/#th_analyser_x.cc#:  Float_t lepwdphi={-99};          otree->Branch("lepwdphi",      &lepwdphi,             "lepwdphi/F");
bin/#th_analyser_x.cc#:  Float_t sphericity=-99;          otree->Branch("sphericity",    &sphericity,         "sphericity/F");
bin/#th_analyser_x.cc#:  Float_t aplanarity=-99;          otree->Branch("aplanarity",    &aplanarity,         "aplanarity/F");
bin/#th_analyser_x.cc#:  Float_t MassDeviation={-99};     otree->Branch("MassDeviation", &MassDeviation,   "MassDeviation/F");
bin/#th_analyser_x.cc#:  Float_t hbbm={-99};              otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/#th_analyser_x.cc#:  Float_t hbbpt={-99};             otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/#th_analyser_x.cc#:  Float_t hbbphi={-99};            otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/#th_analyser_x.cc#:  Float_t hbbeta={-99};            otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/#th_analyser_x.cc#:  Float_t hbbdr={-99};             otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/#th_analyser_x.cc#:  Int_t   hbbjtidx[3]={-99};       otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/#th_analyser_x.cc#:  Float_t topm={-99};              otree->Branch("topm",          &topm,                     "topm/F");
bin/#th_analyser_x.cc#:  Float_t toppt={-99};             otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/#th_analyser_x.cc#:  Float_t topphi={-99};            otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/#th_analyser_x.cc#:  Float_t topeta={-99};            otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/#th_analyser_x.cc#:  Int_t   topjtidx={-99};          otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/#th_analyser_x.cc#:  Float_t costst={-99};            otree->Branch("costst",        &costst,                 "costst/F");
bin/#th_analyser_x.cc#:  Float_t coststh={-99};           otree->Branch("coststh",       &coststh,               "coststh/F");
bin/#th_analyser_x.cc#:  Bool_t  hlt_isomu24_eta2p1=0;     otree->Branch("hlt_isomu24_eta2p1",&hlt_isomu24_eta2p1,"hlt_isomu24_eta2p1/O");
bin/#th_analyser_x.cc#:  Bool_t  hlt_isomu24=0;            otree->Branch("hlt_isomu24",       &hlt_isomu24,              "hlt_isomu24/O");
bin/#th_analyser_x.cc#:  Bool_t  hlt_ele27_wp80=0;         otree->Branch("hlt_ele27_wp80",    &hlt_ele27_wp80,        "hlt_ele27_wp80/O");
bin/#th_analyser_x.cc#:  Float_t weightTrig=1;            otree->Branch("weightTrig",    &weightTrig,         "weightTrig/F");
bin/#th_analyser_x.cc#:  Float_t weightPU=1;              otree->Branch("weightPU",      &weightPU,             "weightPU/F");
bin/#th_analyser_x.cc#:  Float_t weightPU_up=1;           otree->Branch("weightPU_up",   &weightPU_up,       "weightPU_up/F");
bin/#th_analyser_x.cc#:  Float_t weightPU_down=1;         otree->Branch("weightPU_down", &weightPU_down,   "weightPU_down/F");
bin/#th_analyser_x.cc#:  UChar_t npv={-99};               otree->Branch("npv",           &npv,                       "npv/b");
bin/#th_analyser_x.cc#:  Int_t   run={-99};               otree->Branch("run",           &run,                       "run/i");
bin/#th_analyser_x.cc#:  ULong64_t evt={-99};             otree->Branch("evt",           &evt,                       "evt/l");
bin/#th_analyser_x.cc#:  UInt_t  lbn={-99};               otree->Branch("lbn",           &lbn,                       "lbn/i");
bin/#th_analyser_x.cc#:  Float_t poissonmean=1;           otree->Branch("poissonmean",   &poissonmean,       "poissonmean/F");
bin/#th_analyser_x.cc#:  Bool_t passpresel=1;             otree->Branch("passpresel",    &passpresel,        "passpresel/O");
bin/#th_analyser_x.cc#:  float btag3MSF=1.;               otree->Branch("btag3MSF",      &btag3MSF,        "btag3MSF/F");
bin/#th_analyser_x.cc#:  float btag3TSF=1.;               otree->Branch("btag3TSF",      &btag3TSF,        "btag3TSF/F");
bin/#th_analyser_x.cc#:  float btag4MSF=1.;               otree->Branch("btag4MSF",      &btag4MSF,        "btag4MSF/F");
bin/#th_analyser_x.cc#:  float btag4TSF=1.;               otree->Branch("btag4TSF",      &btag4TSF,        "btag4TSF/F");
bin/#th_analyser_x.cc#:    otree->Fill();
bin/#th_analyser_x.cc#:  double ntotal = otree->GetEntries();
bin/#th_analyser_x.cc#:  otree->GetUserInfo()->Add(new TObjString(ss.str().c_str()));
bin/#th_analyser_x.cc#:  otree->GetUserInfo()->Add(new TObjString(ss1.str().c_str()));
bin/#th_analyser_x.cc#:  otree->GetUserInfo()->Add(new TObjString(ss2.str().c_str()));
bin/#th_analyser_x.cc#:  otree->GetUserInfo()->Add(new TObjString(ss3.str().c_str()));
bin/#th_flavorschemematcher_x.cc#:  TBranch* b_sbptrwgt        =otree->Branch("sbptrwgt",       &sbptrwgt,        "sbptrwgt/F");
bin/#th_flavorschemematcher_x.cc#:  TBranch* b_sbptrwgt2d      =otree->Branch("sbptrwgt2d",     &sbptrwgt2d,      "sbptrwgt2d/F");
bin/#th_flavorschemematcher_x.cc#:  TBranch* b_test      =otree->Branch("test",     &test,      "test/F");
bin/th_addvariables_x.cc:      TBranch* b_njt                 =otree->Branch("njt",       &njt,    "njt/I");
bin/th_addvariables_x.cc:      TBranch* b_costhetastar        =otree->Branch("costhetastar",      &costhetastar,           "costhetastar/F");
bin/th_addvariables_x.cc:      TBranch* b_costhetastarhiggs   =otree->Branch("costhetastarhiggs", &costhetastarhiggs, "costhetastarhiggs/F");
bin/th_addvariables_x.cc:      TBranch* b_coszetastar         =otree->Branch("coszetastar",       &coszetastar,             "coszetastar/F");
bin/th_addvariables_x.cc:      TBranch* b_twist               =otree->Branch("twist",             &twist,                         "twist/F");
bin/th_addvariables_x.cc:      TBranch* b_helicity_h1         =otree->Branch("helicity_h1",       &helicity_h1,             "helicity_h1/F");
bin/th_addvariables_x.cc:      TBranch* b_helicity_h2         =otree->Branch("helicity_h2",       &helicity_h2,             "helicity_h2/F");
bin/th_addvariables_x.cc:      TBranch* b_helicity_ljt        =otree->Branch("helicity_ljt",      &helicity_ljt,           "helicity_ljt/F");
bin/th_addvariables_x.cc:      TBranch* b_helicity_topjt      =otree->Branch("helicity_topjt",    &helicity_topjt,       "helicity_topjt/F");
bin/th_addvariables_x.cc:      TBranch* b_taggerpos           =otree->Branch("taggerpos",         taggerpos,             "taggerpos[140]/I");
bin/th_addvariables_x.cc:      TBranch* b_taggerpos_new       =otree->Branch("taggerpos_new",     taggerpos_new,     "taggerpos_new[140]/I");
bin/th_addvariables_x.cc:      TBranch* b_etapos              =otree->Branch("etapos",            etapos,                   "etapos[140]/I");
bin/th_addvariables_x.cc:      TBranch* b_jtcsvt              =otree->Branch("jtcsvt",            jtcsvt,                 "jtcsvt[njt]/F");
bin/th_analyser_x.cc:  Int_t   njt=0;                   otree->Branch("njt",           &njt,                       "njt/I");
bin/th_analyser_x.cc:  Int_t   njt10=0;                 otree->Branch("njt10",           &njt10,                       "njt10/I");
bin/th_analyser_x.cc:  Float_t jtpt[140]={-99};         otree->Branch("jtpt",          jtpt,                 "jtpt[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtrawpt[140]={-99};      otree->Branch("jtrawpt",       jtrawpt,           "jtrawpt[njt10]/F");
bin/th_analyser_x.cc:  Float_t jteta[140]={-99};        otree->Branch("jteta",         jteta,               "jteta[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtphi[140]={-99};        otree->Branch("jtphi",         jtphi,               "jtphi[njt10]/F");
bin/th_analyser_x.cc:  Float_t jte[140]={-99};          otree->Branch("jte",           jte,                   "jte[njt10]/F");
bin/th_analyser_x.cc:  Float_t sumHt = -99;             otree->Branch("sumHt",         &sumHt,                   "sumHt/F");
bin/th_analyser_x.cc:  Short_t jtgenflv[140]={-99};     otree->Branch("jtgenflv",      jtgenflv,         "jtgenflv[njt10]/S");
bin/th_analyser_x.cc:  Float_t jtgenpt[140]={-99};      otree->Branch("jtgenpt",       jtgenpt,           "jtgenpt[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtgeneta[140]={-99};     otree->Branch("jtgeneta",      jtgeneta,         "jtgeneta[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtgenphi[140]={-99};     otree->Branch("jtgenphi",      jtgenphi,         "jtgenphi[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtgene[140]={-99};       otree->Branch("jtgene",        jtgene,             "jtgene[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvt[140]={-99};       otree->Branch("jtcsvt",        jtcsvt,             "jtcsvt[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvtcorr[140][5];      otree->Branch("jtcsvtcorr",    jtcsvtcorr,  "jtcsvtcorr[njt10][5]/F"); 
bin/th_analyser_x.cc:  Float_t jtcsvtcorr4p[140][4];    otree->Branch("jtcsvtcorr4p",  jtcsvtcorr4p,"jtcsvtcorr[njt10][4]/F"); 
bin/th_analyser_x.cc:  Float_t jtntracks[140]={-99};    otree->Branch("jtntracks",     jtntracks,        "jtntracks[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtarea[140]={-99};       otree->Branch("jtarea",        jtarea,             "jtarea[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtpull[140]={-99};       otree->Branch("jtpull",        jtpull,             "jtpull[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcharge[140]={-99};     otree->Branch("jtcharge",      jtcharge,         "jtcharge[njt10]/F");
bin/th_analyser_x.cc:  Bool_t  jtid[140]={0};           otree->Branch("jtid",          jtid,                 "jtid[njt10]/O");
bin/th_analyser_x.cc:  Float_t jtchhadmult[140]={-99};  otree->Branch("jtchhadmult",   jtchhadmult,   "jtchhadmult[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvsf_l[140]={-99};    otree->Branch("jtcsvsf_l",     jtcsvsf_l,       "jtcsvsf_l[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvsf_m[140]={-99};    otree->Branch("jtcsvsf_m",     jtcsvsf_m,       "jtcsvsf_m[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvsf_t[140]={-99};    otree->Branch("jtcsvsf_t",     jtcsvsf_t,       "jtcsvsf_t[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvsf_lerr[140]={-99}; otree->Branch("jtcsvsf_lerr",  jtcsvsf_lerr, "jtcsvsf_lerr[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvsf_merr[140]={-99}; otree->Branch("jtcsvsf_merr",  jtcsvsf_merr, "jtcsvsf_merr[njt10]/F");
bin/th_analyser_x.cc:  Float_t jtcsvsf_terr[140]={-99}; otree->Branch("jtcsvsf_terr",  jtcsvsf_terr, "jtcsvsf_terr[njt10]/F");
bin/th_analyser_x.cc:  Int_t   nlmu;                    otree->Branch("nlmu",          &nlmu,                     "nlmu/I");
bin/th_analyser_x.cc:  Float_t lmupt[110]={-99};        otree->Branch("lmupt",         lmupt,              "lmupt[nlmu]/F");
bin/th_analyser_x.cc:  Float_t lmueta[110]={-99};       otree->Branch("lmueta",        lmueta,            "lmueta[nlmu]/F");
bin/th_analyser_x.cc:  Float_t lmuphi[110]={-99};       otree->Branch("lmuphi",        lmuphi,            "lmuphi[nlmu]/F");
bin/th_analyser_x.cc:  Float_t lmuiso[110]={-99};       otree->Branch("lmuiso",        lmuiso,            "lmuiso[nlmu]/F");
bin/th_analyser_x.cc:  Float_t lmuiso_dBeta[110]={-99}; otree->Branch("lmuiso_dBeta",  lmuiso_dBeta,"lmuiso_dBeta[nlmu]/F");
bin/th_analyser_x.cc:  Float_t lmue[110]={-99};         otree->Branch("lmue",          lmue,                "lmue[nlmu]/F");
bin/th_analyser_x.cc:  Float_t lmucharge[110]={-99};    otree->Branch("lmucharge",     lmucharge,      "lmucharge[nlmu]/F");
bin/th_analyser_x.cc:  Float_t musigid[110]={-99};      otree->Branch("musigid",       musigid,          "musigid[nlmu]/F");
bin/th_analyser_x.cc:  Float_t muvetoid[110]={-99};     otree->Branch("muvetoid",      muvetoid,        "muvetoid[nlmu]/F");
bin/th_analyser_x.cc:  Int_t   nvetomu={-99};           otree->Branch("nvetomu",       &nvetomu,               "nvetomu/I");
bin/th_analyser_x.cc:  Int_t   nmu={-99};               otree->Branch("nmu",           &nmu,                       "nmu/I");
bin/th_analyser_x.cc:  Float_t mupt[110]={-99};         otree->Branch("mupt",          mupt,                 "mupt[nmu]/F");
bin/th_analyser_x.cc:  Float_t mueta[110]={-99};        otree->Branch("mueta",         mueta,               "mueta[nmu]/F");
bin/th_analyser_x.cc:  Float_t muphi[110]={-99};        otree->Branch("muphi",         muphi,               "muphi[nmu]/F");
bin/th_analyser_x.cc:  Float_t muiso[110]={-99};        otree->Branch("muiso",         muiso,               "muiso[nmu]/F");
bin/th_analyser_x.cc:  Float_t mue[110]={-99};          otree->Branch("mue",           mue,                   "mue[nmu]/F");
bin/th_analyser_x.cc:  Float_t mucharge[110]={-99};     otree->Branch("mucharge",      mucharge,         "mucharge[nmu]/F");
bin/th_analyser_x.cc:  Int_t   nlel;                    otree->Branch("nlel",          &nlel,                     "nlel/I");
bin/th_analyser_x.cc:  Float_t lelpt[110]={-99};        otree->Branch("lelpt",         lelpt,              "lelpt[nlel]/F");
bin/th_analyser_x.cc:  Float_t leleta[110]={-99};       otree->Branch("leleta",        leleta,            "leleta[nlel]/F");
bin/th_analyser_x.cc:  Float_t lelphi[110]={-99};       otree->Branch("lelphi",        lelphi,            "lelphi[nlel]/F");
bin/th_analyser_x.cc:  Float_t leliso[110]={-99};       otree->Branch("leliso",        leliso,            "leliso[nlel]/F");
bin/th_analyser_x.cc:  Float_t leliso2[110]={-99};      otree->Branch("leliso2",       leliso2,          "leliso2[nlel]/F");
bin/th_analyser_x.cc:  Float_t lele[110]={-99};         otree->Branch("lele",          lele,                "lele[nlel]/F");
bin/th_analyser_x.cc:  Float_t lelcharge[110]={-99};    otree->Branch("lelcharge",     lelcharge,      "lelcharge[nlel]/F");
bin/th_analyser_x.cc:  Float_t lelmvaid[110]={-99};     otree->Branch("lelmvaid",      lelmvaid,        "lelvmaid[nlel]/F");
bin/th_analyser_x.cc:  Float_t  lelconv[110]={-99};     otree->Branch("lelconv",       lelconv,          "lelconv[nlel]/F");
bin/th_analyser_x.cc:  Int_t   nvetoel={-99};           otree->Branch("nvetoel",       &nvetoel,               "nvetoel/I");
bin/th_analyser_x.cc:  Int_t   nel={-99};               otree->Branch("nel",           &nel,                       "nel/I");
bin/th_analyser_x.cc:  Float_t elpt[110]={-99};         otree->Branch("elpt",          elpt,                 "elpt[nel]/F");
bin/th_analyser_x.cc:  Float_t eleta[110]={-99};        otree->Branch("eleta",         eleta,               "eleta[nel]/F");
bin/th_analyser_x.cc:  Float_t elphi[110]={-99};        otree->Branch("elphi",         elphi,               "elphi[nel]/F");
bin/th_analyser_x.cc:  Float_t eliso[110]={-99};        otree->Branch("eliso",         eliso,               "eliso[nel]/F");
bin/th_analyser_x.cc:  Float_t ele[110]={-99};          otree->Branch("ele",           ele,                   "ele[nel]/F");
bin/th_analyser_x.cc:  Float_t elcharge[110]={-99};     otree->Branch("elcharge",      elcharge,         "elcharge[nel]/F");
bin/th_analyser_x.cc:  Float_t elmvaid[110]={-99};      otree->Branch("elmvaid",       elmvaid,           "elvmaid[nel]/F");
bin/th_analyser_x.cc:  Float_t elsigid[110]={-99};      otree->Branch("elsigid",       elsigid,          "elsigid[nlel]/F");  
bin/th_analyser_x.cc:  Float_t elvetoid[110]={-99};     otree->Branch("elvetoid",      elvetoid,        "elvetoid[nlel]/F");
bin/th_analyser_x.cc:  Float_t Hpt={-99};               otree->Branch("Hpt",           &Hpt,                       "Hpt/F");
bin/th_analyser_x.cc:  Float_t Heta={-99};              otree->Branch("Heta",          &Heta,                     "Heta/F");
bin/th_analyser_x.cc:  Float_t Hphi={-99};              otree->Branch("Hphi",          &Hphi,                     "Hphi/F");
bin/th_analyser_x.cc:  Float_t Hm={-99};                otree->Branch("Hm",            &Hm,                         "Hm/F");
bin/th_analyser_x.cc:  Float_t Wpt={-99};               otree->Branch("Wpt",           &Wpt,                       "Wpt/F");
bin/th_analyser_x.cc:  Float_t Weta={-99};              otree->Branch("Weta",          &Weta,                     "Weta/F");
bin/th_analyser_x.cc:  Float_t Wphi={-99};              otree->Branch("Wphi",          &Wphi,                     "Wphi/F");
bin/th_analyser_x.cc:  Float_t Wm={-99};                otree->Branch("Wm",            &Wm,                         "Wm/F");
bin/th_analyser_x.cc:  Float_t tpt={-99};               otree->Branch("tpt",           &tpt,                       "tpt/F");
bin/th_analyser_x.cc:  Float_t teta={-99};              otree->Branch("teta",          &teta,                     "teta/F");
bin/th_analyser_x.cc:  Float_t tphi={-99};              otree->Branch("tphi",          &tphi,                     "tphi/F");
bin/th_analyser_x.cc:  Float_t tm={-99};                otree->Branch("tm",            &tm,                         "tm/F");
bin/th_analyser_x.cc:  Float_t btoppt={-99};            otree->Branch("btoppt",        &btoppt,                 "btoppt/F");
bin/th_analyser_x.cc:  Float_t btopeta={-99};           otree->Branch("btopeta",       &btopeta,               "btopeta/F");
bin/th_analyser_x.cc:  Float_t btopphi={-99};           otree->Branch("btopphi",       &btopphi,               "btopphi/F");
bin/th_analyser_x.cc:  Float_t btopm={-99};             otree->Branch("btopm",         &btopm,                   "btopm/F");
bin/th_analyser_x.cc:  Float_t sbpt={-99};              otree->Branch("sbpt",          &sbpt,                     "sbpt/F");
bin/th_analyser_x.cc:  Float_t sbeta={-99};             otree->Branch("sbeta",         &sbeta,                   "sbeta/F");
bin/th_analyser_x.cc:  Float_t sbphi={-99};             otree->Branch("sbphi",         &sbphi,                   "sbphi/F");
bin/th_analyser_x.cc:  Float_t sbm={-99};               otree->Branch("sbm",           &sbm,                       "sbm/F");
bin/th_analyser_x.cc:  Float_t lqpt={-99};              otree->Branch("lqpt",          &lqpt,                     "lqpt/F");
bin/th_analyser_x.cc:  Float_t lqeta={-99};             otree->Branch("lqeta",         &lqeta,                   "lqeta/F");
bin/th_analyser_x.cc:  Float_t lqphi={-99};             otree->Branch("lqphi",         &lqphi,                   "lqphi/F");
bin/th_analyser_x.cc:  Float_t lqm={-99};               otree->Branch("lqm",           &lqm,                       "lqm/F");
bin/th_analyser_x.cc:  Float_t Hdaupt[2]={-99};         otree->Branch("Hdaupt",        Hdaupt,               "Hdaupt[2]/F");
bin/th_analyser_x.cc:  Float_t Hdaueta[2]={-99};        otree->Branch("Hdaueta",       Hdaueta,             "Hdaueta[2]/F");
bin/th_analyser_x.cc:  Float_t Hdauphi[2]={-99};        otree->Branch("Hdauphi",       Hdauphi,             "Hdauphi[2]/F");
bin/th_analyser_x.cc:  Float_t Hdaum[2]={-99};          otree->Branch("Hdaum",         Hdaum,                 "Hdaum[2]/F");
bin/th_analyser_x.cc:  Float_t Wdaupt[2]={-99};         otree->Branch("Wdaupt",        Wdaupt,               "Wdaupt[2]/F");
bin/th_analyser_x.cc:  Float_t Wdaueta[2]={-99};        otree->Branch("Wdaueta",       Wdaueta,             "Wdaueta[2]/F");
bin/th_analyser_x.cc:  Float_t Wdauphi[2]={-99};        otree->Branch("Wdauphi",       Wdauphi,             "Wdauphi[2]/F");
bin/th_analyser_x.cc:  Float_t Wdaum[2]={-99};          otree->Branch("Wdaum",         Wdaum,                 "Wdaum[2]/F");
bin/th_analyser_x.cc:  Float_t top_tpt={-99};           otree->Branch("top_tpt",       &top_tpt,               "top_tpt/F");
bin/th_analyser_x.cc:  Float_t top_teta={-99};          otree->Branch("top_teta",      &top_teta,             "top_teta/F");
bin/th_analyser_x.cc:  Float_t top_tphi={-99};          otree->Branch("top_tphi",      &top_tphi,             "top_tphi/F");
bin/th_analyser_x.cc:  Float_t top_te={-99};            otree->Branch("top_te",        &top_te,                 "top_te/F");
bin/th_analyser_x.cc:  Float_t top_tbarpt={-99};        otree->Branch("top_tbarpt",    &top_tbarpt,         "top_tbarpt/F");
bin/th_analyser_x.cc:  Float_t top_tbareta={-99};       otree->Branch("top_tbareta",   &top_tbareta,       "top_tbareta/F");
bin/th_analyser_x.cc:  Float_t top_tbarphi={-99};       otree->Branch("top_tbarphi",   &top_tbarphi,       "top_tbarphi/F");
bin/th_analyser_x.cc:  Float_t top_tbare={-99};         otree->Branch("top_tbare",     &top_tbare,           "top_tbare/F");
bin/th_analyser_x.cc:  Float_t top_twpt={-99};          otree->Branch("top_twpt",      &top_twpt,             "top_twpt/F");
bin/th_analyser_x.cc:  Float_t top_tweta={-99};         otree->Branch("top_tweta",     &top_tweta,           "top_tweta/F");
bin/th_analyser_x.cc:  Float_t top_twphi={-99};         otree->Branch("top_twphi",     &top_twphi,           "top_twphi/F");
bin/th_analyser_x.cc:  Float_t top_twe={-99};           otree->Branch("top_twe",       &top_twe,               "top_twe/F");
bin/th_analyser_x.cc:  Float_t top_tbarwpt={-99};       otree->Branch("top_tbarwpt",   &top_tbarwpt,       "top_tbarwpt/F");
bin/th_analyser_x.cc:  Float_t top_tbarweta={-99};      otree->Branch("top_tbarweta",  &top_tbarweta,     "top_tbarweta/F");
bin/th_analyser_x.cc:  Float_t top_tbarwphi={-99};      otree->Branch("top_tbarwphi",  &top_tbarwphi,     "top_tbarwphi/F");
bin/th_analyser_x.cc:  Float_t top_tbarwe={-99};        otree->Branch("top_tbarwe",    &top_tbarwe,         "top_tbarwe/F");
bin/th_analyser_x.cc:  Float_t top_twdaupt[2]={-99};          otree->Branch("top_twdaupt",      top_twdaupt,             "top_twdaupt[2]/F");
bin/th_analyser_x.cc:  Float_t top_twdaueta[2]={-99};         otree->Branch("top_twdaueta",     top_twdaueta,           "top_twdaueta[2]/F");
bin/th_analyser_x.cc:  Float_t top_twdauphi[2]={-99};         otree->Branch("top_twdauphi",     top_twdauphi,           "top_twdauphi[2]/F");
bin/th_analyser_x.cc:  Float_t top_twdaue[2]={-99};           otree->Branch("top_twdaue",       top_twdaue,               "top_twdaue[2]/F");
bin/th_analyser_x.cc:  Float_t top_tbarwdaupt[2]={-99};          otree->Branch("top_tbarwdaupt",      top_tbarwdaupt,             "top_tbarwdaupt[2]/F");
bin/th_analyser_x.cc:  Float_t top_tbarwdaueta[2]={-99};         otree->Branch("top_tbarwdaueta",     top_tbarwdaueta,           "top_tbarwdaueta[2]/F");
bin/th_analyser_x.cc:  Float_t top_tbarwdauphi[2]={-99};         otree->Branch("top_tbarwdauphi",     top_tbarwdauphi,           "top_tbarwdauphi[2]/F");
bin/th_analyser_x.cc:  Float_t top_tbarwdaue[2]={-99};           otree->Branch("top_tbarwdaue",       top_tbarwdaue,               "top_tbarwdaue[2]/F");
bin/th_analyser_x.cc:  Float_t top_tbpt={-99};          otree->Branch("top_tbpt",      &top_tbpt,             "top_tbpt/F");
bin/th_analyser_x.cc:  Float_t top_tbeta={-99};         otree->Branch("top_tbeta",     &top_tbeta,           "top_tbeta/F");
bin/th_analyser_x.cc:  Float_t top_tbphi={-99};         otree->Branch("top_tbphi",     &top_tbphi,           "top_tbphi/F");
bin/th_analyser_x.cc:  Float_t top_tbe={-99};           otree->Branch("top_tbe",       &top_tbe,               "top_tbe/F");
bin/th_analyser_x.cc:  Float_t top_tbarbpt={-99};          otree->Branch("top_tbarbpt",      &top_tbarbpt,             "top_tbarbpt/F");
bin/th_analyser_x.cc:  Float_t top_tbarbeta={-99};         otree->Branch("top_tbarbeta",     &top_tbarbeta,           "top_tbarbeta/F");
bin/th_analyser_x.cc:  Float_t top_tbarbphi={-99};         otree->Branch("top_tbarbphi",     &top_tbarbphi,           "top_tbarbphi/F");
bin/th_analyser_x.cc:  Float_t top_tbarbe={-99};           otree->Branch("top_tbarbe",       &top_tbarbe,               "top_tbarbe/F");
bin/th_analyser_x.cc:  Float_t top_lepcharge={-99};     otree->Branch("top_lepcharge", &top_lepcharge,   "top_lepcharge/F");
bin/th_analyser_x.cc:  Float_t met={-99};               otree->Branch("met",           &met,                       "met/F");
bin/th_analyser_x.cc:  Float_t uncorrmet={-99};         otree->Branch("uncorrmet",     &uncorrmet,           "uncorrmet/F");
bin/th_analyser_x.cc:  Float_t metphi={-99};            otree->Branch("metphi",        &metphi,                 "metphi/F");
bin/th_analyser_x.cc:  Float_t uncorrmetphi={-99};      otree->Branch("uncorrmetphi",  &uncorrmetphi,     "uncorrmetphi/F");
bin/th_analyser_x.cc:  Float_t meteta={-99};            otree->Branch("meteta",        &meteta,                 "meteta/F");
bin/th_analyser_x.cc:  Float_t metx={-99};              otree->Branch("metx",          &metx,                     "metx/F");
bin/th_analyser_x.cc:  Float_t mety={-99};              otree->Branch("mety",          &mety,                     "mety/F");     
bin/th_analyser_x.cc:  Float_t metsig=-99;              otree->Branch("metsig",        &metsig,                 "metsig/F");
bin/th_analyser_x.cc:  Float_t metsumet=-99;            otree->Branch("metsumet",      &metsumet,             "metsumet/F");
bin/th_analyser_x.cc:  Float_t metsysx[2]={-99,-99};    otree->Branch("metsysx",       metsysx,             "metsysx[2]/F");
bin/th_analyser_x.cc:  Float_t metsysy[2]={-99,-99};    otree->Branch("metsysy",       metsysy,             "metsysy[2]/F");
bin/th_analyser_x.cc:  Float_t metsys[2]={-99,-99};     otree->Branch("metsys",        metsys,               "metsys[2]/F");
bin/th_analyser_x.cc:  UChar_t nlepw={-99};             otree->Branch("nlepw",         &nlepw,                   "nlepw/b");
bin/th_analyser_x.cc:  Float_t lepwm={-99};             otree->Branch("lepwm",         &lepwm,                   "lepwm/F");
bin/th_analyser_x.cc:  Float_t lepwpt={-99};            otree->Branch("lepwpt",        &lepwpt,                 "lepwpt/F");
bin/th_analyser_x.cc:  Float_t lepwphi={-99};           otree->Branch("lepwphi",       &lepwphi,               "lepwphi/F");
bin/th_analyser_x.cc:  Float_t lepweta={-99};           otree->Branch("lepweta",       &lepweta,               "lepweta/F");
bin/th_analyser_x.cc:  Float_t lepwet={-99};            otree->Branch("lepwet",        &lepwet,                 "lepwet/F");
bin/th_analyser_x.cc:  Float_t lepwmt={-99};            otree->Branch("lepwmt",        &lepwmt,                 "lepwmt/F");
bin/th_analyser_x.cc:  Float_t lepwdphi={-99};          otree->Branch("lepwdphi",      &lepwdphi,             "lepwdphi/F");
bin/th_analyser_x.cc:  Float_t sphericity=-99;          otree->Branch("sphericity",    &sphericity,         "sphericity/F");
bin/th_analyser_x.cc:  Float_t aplanarity=-99;          otree->Branch("aplanarity",    &aplanarity,         "aplanarity/F");
bin/th_analyser_x.cc:  Float_t MassDeviation={-99};     otree->Branch("MassDeviation", &MassDeviation,   "MassDeviation/F");
bin/th_analyser_x.cc:  Float_t hbbm={-99};              otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/th_analyser_x.cc:  Float_t hbbpt={-99};             otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/th_analyser_x.cc:  Float_t hbbphi={-99};            otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/th_analyser_x.cc:  Float_t hbbeta={-99};            otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/th_analyser_x.cc:  Float_t hbbdr={-99};             otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/th_analyser_x.cc:  Int_t   hbbjtidx[3]={-99};       otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/th_analyser_x.cc:  Float_t topm={-99};              otree->Branch("topm",          &topm,                     "topm/F");
bin/th_analyser_x.cc:  Float_t toppt={-99};             otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/th_analyser_x.cc:  Float_t topphi={-99};            otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/th_analyser_x.cc:  Float_t topeta={-99};            otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/th_analyser_x.cc:  Int_t   topjtidx={-99};          otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/th_analyser_x.cc:  Float_t costst={-99};            otree->Branch("costst",        &costst,                 "costst/F");
bin/th_analyser_x.cc:  Float_t coststh={-99};           otree->Branch("coststh",       &coststh,               "coststh/F");
bin/th_analyser_x.cc:  Bool_t  hlt_isomu24_eta2p1=0;     otree->Branch("hlt_isomu24_eta2p1",&hlt_isomu24_eta2p1,"hlt_isomu24_eta2p1/O");
bin/th_analyser_x.cc:  Bool_t  hlt_isomu24=0;            otree->Branch("hlt_isomu24",       &hlt_isomu24,              "hlt_isomu24/O");
bin/th_analyser_x.cc:  Bool_t  hlt_ele27_wp80=0;         otree->Branch("hlt_ele27_wp80",    &hlt_ele27_wp80,        "hlt_ele27_wp80/O");
bin/th_analyser_x.cc:  Float_t weightTrig=1;            otree->Branch("weightTrig",    &weightTrig,         "weightTrig/F");
bin/th_analyser_x.cc:  Float_t weightPU=1;              otree->Branch("weightPU",      &weightPU,             "weightPU/F");
bin/th_analyser_x.cc:  Float_t weightPU_up=1;           otree->Branch("weightPU_up",   &weightPU_up,       "weightPU_up/F");
bin/th_analyser_x.cc:  Float_t weightPU_down=1;         otree->Branch("weightPU_down", &weightPU_down,   "weightPU_down/F");
bin/th_analyser_x.cc:  UChar_t npv={-99};               otree->Branch("npv",           &npv,                       "npv/b");
bin/th_analyser_x.cc:  Int_t   run={-99};               otree->Branch("run",           &run,                       "run/i");
bin/th_analyser_x.cc:  ULong64_t evt={-99};             otree->Branch("evt",           &evt,                       "evt/l");
bin/th_analyser_x.cc:  UInt_t  lbn={-99};               otree->Branch("lbn",           &lbn,                       "lbn/i");
bin/th_analyser_x.cc:  Float_t poissonmean=1;           otree->Branch("poissonmean",   &poissonmean,       "poissonmean/F");
bin/th_analyser_x.cc:  Bool_t passpresel=1;             otree->Branch("passpresel",    &passpresel,        "passpresel/O");
bin/th_analyser_x.cc:  float btag3MSF=1.;               otree->Branch("btag3MSF",      &btag3MSF,        "btag3MSF/F");
bin/th_analyser_x.cc:  float btag3TSF=1.;               otree->Branch("btag3TSF",      &btag3TSF,        "btag3TSF/F");
bin/th_analyser_x.cc:  float btag4MSF=1.;               otree->Branch("btag4MSF",      &btag4MSF,        "btag4MSF/F");
bin/th_analyser_x.cc:  float btag4TSF=1.;               otree->Branch("btag4TSF",      &btag4TSF,        "btag4TSF/F");
bin/th_analyser_x.cc:    otree->Fill();
bin/th_analyser_x.cc:  double ntotal = otree->GetEntries();
bin/th_analyser_x.cc:  otree->GetUserInfo()->Add(new TObjString(ss.str().c_str()));
bin/th_analyser_x.cc:  otree->GetUserInfo()->Add(new TObjString(ss1.str().c_str()));
bin/th_analyser_x.cc:  otree->GetUserInfo()->Add(new TObjString(ss2.str().c_str()));
bin/th_analyser_x.cc:  otree->GetUserInfo()->Add(new TObjString(ss3.str().c_str()));
bin/th_analyser_x.cc.~1.1.~:  Float_t metsig;          otree->Branch("metsig",       &metsig,            "metsig/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t metsumet;        otree->Branch("metsumet",     &metsumet,        "metsumet/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t   njt;             otree->Branch("njt",           &njt,                "njt/b");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtpt[140];       otree->Branch("jtpt",          jtpt,          "jtpt[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jteta[140];      otree->Branch("jteta",         jteta,        "jteta[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtphi[140];      otree->Branch("jtphi",         jtphi,        "jtphi[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jte[140];        otree->Branch("jte",           jte,            "jte[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Short_t jtgenflv[140];   otree->Branch("jtgenflv",      jtgenflv,  "jtgenflv[njt]/S");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtgenpt[140];    otree->Branch("jtgenpt",       jtgenpt,    "jtgenpt[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtgeneta[140];    otree->Branch("jtgeneta",       jtgeneta,    "jtgeneta[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtgenphi[140];    otree->Branch("jtgenphi",       jtgenphi,    "jtgenphi[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtgene[140];    otree->Branch("jtgene",       jtgene,    "jtgene[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtcsvt[140];     otree->Branch("jtcsvt",        jtcsvt,      "jtcsvt[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtntracks[140];     otree->Branch("jtntracks",        jtntracks,      "jtntacks[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtarea[140];     otree->Branch("jtarea",        jtarea,      "jtarea[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtcharge[140];   otree->Branch("jtcharge",     jtcharge,    "jtcharge[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t nlmu;                otree->Branch("nlmu",           &nlmu,                "nlmu/I");
bin/th_analyser_x.cc.~1.1.~:  Float_t lmupt[110];        otree->Branch("lmupt",          lmupt,          "lmupt[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lmueta[110];       otree->Branch("lmueta",         lmueta,        "lmueta[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lmuphi[110];       otree->Branch("lmuphi",         lmuphi,        "lmuphi[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lmuiso[110];      otree->Branch("lmuiso",         lmuiso,        "lmuiso[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lmue[110];        otree->Branch("lmue",          lmue,          "lmue[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t nmu;                otree->Branch("nmu",           &nmu,                "nmu/I");
bin/th_analyser_x.cc.~1.1.~:  Float_t mupt[110];        otree->Branch("mupt",          mupt,          "mupt[nmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t mueta[110];       otree->Branch("mueta",         mueta,        "mueta[nmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t muphi[110];       otree->Branch("muphi",         muphi,        "muphi[nmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t muiso[110];      otree->Branch("muiso",         muiso,        "muiso[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t mue[110];        otree->Branch("mue",          mue,          "mue[nlmu]/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t nlel;                otree->Branch("nlel",           &nlel,                "nlel/I");
bin/th_analyser_x.cc.~1.1.~:  Float_t lelpt[110];        otree->Branch("lelpt",          lelpt,          "lelpt[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t leleta[110];       otree->Branch("leleta",         leleta,        "leleta[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lelphi[110];       otree->Branch("lelphi",         lelphi,        "lelphi[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t leliso[110];      otree->Branch("leliso",         leliso,        "leliso[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lele[110];        otree->Branch("lele",          lele,          "lele[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t nel;                otree->Branch("nel",           &nel,                "nel/I");
bin/th_analyser_x.cc.~1.1.~:  Float_t elpt[110];        otree->Branch("elpt",          elpt,          "elpt[nel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t eleta[110];       otree->Branch("eleta",         eleta,        "eleta[nel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t elphi[110];       otree->Branch("elphi",         elphi,        "elphi[nel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t eliso[110];      otree->Branch("eliso",         eliso,        "eliso[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t ele[110];        otree->Branch("ele",          ele,          "ele[nlel]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hpt;                otree->Branch("Hpt",           &Hpt,                "Hpt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Heta;                otree->Branch("Heta",           &Heta,                "Heta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hphi;                otree->Branch("Hphi",           &Hphi,                "Hphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hm;                otree->Branch("Hm",           &Hm,                "Hm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wpt;                otree->Branch("Wpt",           &Wpt,                "Wpt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Weta;                otree->Branch("Weta",           &Weta,                "Weta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wphi;                otree->Branch("Wphi",           &Wphi,                "Wphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wm;                otree->Branch("Wm",           &Wm,                "Wm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t tpt;                otree->Branch("tpt",           &tpt,                "tpt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t teta;                otree->Branch("teta",           &teta,                "teta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t tphi;                otree->Branch("tphi",           &tphi,                "tphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t tm;                otree->Branch("tm",           &tm,                "tm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t btoppt;                otree->Branch("btoppt",           &btoppt,                "btoppt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t btopeta;                otree->Branch("btopeta",           &btopeta,                "btopeta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t btopphi;                otree->Branch("btopphi",           &btopphi,                "btopphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t btopm;                otree->Branch("btopm",           &btopm,                "btopm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t sbpt;                otree->Branch("sbpt",           &sbpt,                "sbpt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t sbeta;                otree->Branch("sbeta",           &sbeta,                "sbeta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t sbphi;                otree->Branch("sbphi",           &sbphi,                "sbphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t sbm;                otree->Branch("sbm",           &sbm,                "sbm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lqpt;                otree->Branch("lqpt",           &lqpt,                "lqpt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lqeta;                otree->Branch("lqeta",           &lqeta,                "lqeta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lqphi;                otree->Branch("lqphi",           &lqphi,                "lqphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lqm;                otree->Branch("lqm",           &lqm,                "lqm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hdaupt[2];  otree->Branch("Hdaupt",           Hdaupt,                "Hdaupt[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hdaueta[2];  otree->Branch("Hdaueta",           Hdaueta,                "Hdaueta[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hdauphi[2];  otree->Branch("Hdauphi",           Hdauphi,                "Hdauphi[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Hdaum[2];  otree->Branch("Hdaum",           Hdaum,                "Hdaum[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wdaupt[2];  otree->Branch("Wdaupt",           Wdaupt,                "Wdaupt[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wdaueta[2];  otree->Branch("Wdaueta",           Wdaueta,                "Wdaueta[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wdauphi[2];  otree->Branch("Wdauphi",           Wdauphi,                "Wdauphi[2]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t Wdaum[2];  otree->Branch("Wdaum",           Wdaum,                "Wdaum[2]/F");
bin/th_analyser_x.cc.~1.1.~:  UChar_t npv;             otree->Branch("npv",           &npv,                "npv/b");
bin/th_analyser_x.cc.~1.1.~:  Int_t run;              otree->Branch("run",            &run,                "run/i");
bin/th_analyser_x.cc.~1.1.~:  ULong64_t evt;           otree->Branch("evt",            &evt,                "evt/l");
bin/th_analyser_x.cc.~1.1.~:  UInt_t lbn;              otree->Branch("lbn",            &lbn,                "lbn/i");
bin/th_analyser_x.cc.~1.1.~:  Float_t jtchhadmult[140]; otree->Branch("jtchhadmult",     jtchhadmult,    "jtchhadmult[njt]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t met;              otree->Branch("met",          &met,                  "met/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t metphi;           otree->Branch("metphi",       &metphi,        "metphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t meteta;           otree->Branch("meteta",       &meteta,        "meteta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t metx;             otree->Branch("metx",       &metx,        "metx/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t mety;             otree->Branch("mety",       &mety,        "mety/F");
bin/th_analyser_x.cc.~1.1.~:  UChar_t nlepw;            otree->Branch("nlepw",        &nlepw,              "nlepw/b");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepwm[3];         otree->Branch("lepwm",        lepwm,        "lepwm[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepwpt[3];        otree->Branch("lepwpt",       lepwpt,      "lepwpt[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepwphi[3];       otree->Branch("lepwphi",      lepwphi,    "lepwphi[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepweta[3];       otree->Branch("lepweta",      lepweta,    "lepweta[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepwet[3];        otree->Branch("lepwet",       lepwet,      "lepwet[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepwmt[3];        otree->Branch("lepwmt",       lepwmt,      "lepwmt[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t lepwdphi[3];      otree->Branch("lepwdphi",       lepwdphi,      "lepwdphi[nlepw]/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t MassDeviation;   otree->Branch("MassDeviation",  &MassDeviation,   "MassDeviation/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t hbbm;            otree->Branch("hbbm",         &hbbm,                  "hbbm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t hbbpt;           otree->Branch("hbbpt",        &hbbpt,                "hbbpt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t hbbphi;          otree->Branch("hbbphi",       &hbbphi,              "hbbphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t hbbeta;          otree->Branch("hbbeta",       &hbbeta,              "hbbeta/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t hbbdr;           otree->Branch("hbbdr",        &hbbdr,                "hbbdr/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t hbbjtidx[3];       otree->Branch("hbbjtidx",     hbbjtidx,        "hbbjtidx[3]/I");
bin/th_analyser_x.cc.~1.1.~:  Float_t topm;            otree->Branch("topm",         &topm,                  "topm/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t toppt;           otree->Branch("toppt",        &toppt,                "toppt/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t topphi;          otree->Branch("topphi",       &topphi,              "topphi/F");
bin/th_analyser_x.cc.~1.1.~:  Float_t topeta;          otree->Branch("topeta",       &topeta,              "topeta/F");
bin/th_analyser_x.cc.~1.1.~:  Int_t topjtidx;          otree->Branch("topjtidx",     &topjtidx,          "topjtidx/I");
bin/th_analyser_x.cc.~1.1.~:  TBranch* b_costst        =otree->Branch("costst",       &costst,        "costst/F");
bin/th_analyser_x.cc.~1.1.~:  TBranch* b_coststh        =otree->Branch("coststh",       &coststh,        "coststh/F");
bin/th_analyser_x.cc.~1.1.~:    otree->Fill();
bin/th_analyser_x.cc.~1.1.~:  double ntotal = otree->GetEntries();
bin/th_analyser_x.cc.~1.1.~:  otree->GetUserInfo()->Add(new TObjString(ss.str().c_str()));
bin/th_analyser_x.cc.~1.1.~:  otree->GetUserInfo()->Add(new TObjString(ss1.str().c_str()));
bin/th_bdtexpert_x.cc:  Float_t  bdtout=-99; otree->Branch("bdtout",&bdtout, "bdtout/F");
bin/th_bdtexpert_x.cc:  Float_t  bdtgout=-99; otree->Branch("bdtgout",&bdtgout, "bdtgout/F");
bin/th_bdtexpert_x.cc:  Float_t  test=-99; otree->Branch("test",&test, "test/F");
bin/th_bdtexpert_x.cc:    otree->Fill();
bin/th_bdtexpert_x.cc:  otree->Write();
bin/th_bdtexpert_x.cc~:  Float_t  bdtout=-99; otree->Branch("bdtout",&bdtout, "bdtout/F");
bin/th_bdtexpert_x.cc~:  Float_t  bdtgout=-99; otree->Branch("bdtgout",&bdtgout, "bdtgout/F");
bin/th_bdtexpert_x.cc~:  Float_t  test=-99; otree->Branch("test",&test, "test/F");
bin/th_bdtexpert_x.cc~:    otree->Fill();
bin/th_bdtexpert_x.cc~:  otree->Write();
bin/th_bdtexpertpop_x.cc:  Float_t  mlpout=-99; otree->Branch("mlpout",&mlpout, "mlpout/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar1",      &var1, "popvar1/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar2",      &var2, "popvar2/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar3",      &var3, "popvar3/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar4",      &var4, "popvar4/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar5",      &var5, "popvar5/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar6",      &var6, "popvar6/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar7",      &var7, "popvar7/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar8",      &var8, "popvar8/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar9",      &var9, "popvar9/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar10",      &var10, "popvar10/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar11",      &var11, "popvar11/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar12",      &var12, "popvar12/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar13",      &var13, "popvar13/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar14",      &var14, "popvar14/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar15",      &var15, "popvar15/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar16",      &var16, "popvar16/F");
bin/th_bdtexpertpop_x.cc:  otree->Branch("popvar17",      &var17, "popvar17/F");
bin/th_bdtexpertpop_x.cc:    otree->Fill();
bin/th_bdtexpertpop_x.cc:  otree->Write();
bin/th_bdtexpertpop_x.cc~:  Float_t  mlpout=-99; otree->Branch("mlpout",&mlpout, "mlpout/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar1",      &var1, "popvar1/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar2",      &var2, "popvar2/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar3",      &var3, "popvar3/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar4",      &var4, "popvar4/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar5",      &var5, "popvar5/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar6",      &var6, "popvar6/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar7",      &var7, "popvar7/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar8",      &var8, "popvar8/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar9",      &var9, "popvar9/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar10",      &var10, "popvar10/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar11",      &var11, "popvar11/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar12",      &var12, "popvar12/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar13",      &var13, "popvar13/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar14",      &var14, "popvar14/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar15",      &var15, "popvar15/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar16",      &var16, "popvar16/F");
bin/th_bdtexpertpop_x.cc~:  otree->Branch("popvar17",      &var17, "popvar17/F");
bin/th_bdtexpertpop_x.cc~:    otree->Fill();
bin/th_bdtexpertpop_x.cc~:  otree->Write();
bin/th_bdttagexpert_x.cc:  Float_t  tag0_bdtg=-99; otree->Branch("tag0_bdtg",&tag0_bdtg, "tag0_bdtg/F");
bin/th_bdttagexpert_x.cc:  Float_t  tag1_bdtg=-99; otree->Branch("tag1_bdtg",&tag1_bdtg, "tag1_bdtg/F");
bin/th_bdttagexpert_x.cc:  Float_t  tag2_bdtg=-99; otree->Branch("tag2_bdtg",&tag2_bdtg, "tag2_bdtg/F");
bin/th_bdttagexpert_x.cc:  Float_t  tag3_bdtg=-99; otree->Branch("tag3_bdtg",&tag3_bdtg, "tag3_bdtg/F");
bin/th_bdttagexpert_x.cc:  Float_t  tag4_bdtg=-99; otree->Branch("tag4_bdtg",&tag4_bdtg, "tag4_bdtg/F");
bin/th_bdttagexpert_x.cc:    otree->Fill();
bin/th_bdttagexpert_x.cc:  otree->Write();
bin/th_csvreweight_x.cc:      TBranch* b_weight_csv        =otree->Branch("weight_csv",      &weight_csv,           "weight_csv/F");
bin/th_flavorschemematcher_x.cc:  TBranch* b_sbptrwgt        =otree->Branch("sbptrwgt",       &sbptrwgt,        "sbptrwgt/F");
bin/th_flavorschemematcher_x.cc:  TBranch* b_sbptrwgt2d      =otree->Branch("sbptrwgt2d",     &sbptrwgt2d,      "sbptrwgt2d/F");
bin/th_flavorschemematcher_x.cc:  TBranch* b_test      =otree->Branch("test",     &test,      "test/F");
bin/th_hypotheses_x.cc:    ULong64_t evt=-99;               otree->Branch("evt",           &evt,                       "evt/l");
bin/th_hypotheses_x.cc:    Int_t   hyp_isbest=-1;           otree->Branch("hyp_isbest",    &hyp_isbest,         "hyp_isbest/I");
bin/th_hypotheses_x.cc:    Float_t hyp_weight=1.;           otree->Branch("hyp_weight",    &hyp_weight,         "hyp_weight/F");
bin/th_hypotheses_x.cc:    Float_t hyp_deltaRrel[4]={-99};  otree->Branch("hyp_deltaRrel", hyp_deltaRrel, "hyp_deltaRrel[4]/F");    
bin/th_hypotheses_x.cc:    Float_t hbbm=-99;                otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/th_hypotheses_x.cc:    Float_t hbbpt=-99;               otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/th_hypotheses_x.cc:    Float_t hbbphi=-99;              otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/th_hypotheses_x.cc:    Float_t hbbeta=-99;              otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/th_hypotheses_x.cc:    Float_t hbbdr=-99;               otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/th_hypotheses_x.cc:    Int_t hbbjtidx[3]={-99,-99,-99}; otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/th_hypotheses_x.cc:    Float_t topm=-99;                otree->Branch("topm",          &topm,                     "topm/F");
bin/th_hypotheses_x.cc:    Float_t toppt=-99;               otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/th_hypotheses_x.cc:    Float_t topphi=-99;              otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/th_hypotheses_x.cc:    Float_t topeta=-99;              otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/th_hypotheses_x.cc:    Int_t topjtidx=-99;              otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/th_hypotheses_x.cc:    Int_t ljtidx=-99;                otree->Branch("ljtidx",        &ljtidx,                 "ljtidx/I");
bin/th_hypotheses_x.cc:    Float_t costwlt_rec=-99;         otree->Branch("costwlt_rec",   &costwlt_rec,       "costwlt_rec/F");
bin/th_hypotheses_x.cc:    Float_t costwlt2_rec=-99;        otree->Branch("costwlt2_rec",  &costwlt2_rec,     "costwlt2_rec/F");
bin/th_hypotheses_x.cc:    Int_t matchable =-1;             otree->Branch("matchable",     &matchable,           "matchable/I");
bin/th_hypotheses_x.cc:    Float_t costhetastarhiggs = -99; otree->Branch("costhetastarhiggs", &costhetastarhiggs,  "costhetastarhiggs/F");
bin/th_hypotheses_x.cc:    Float_t btoplepm = -99; otree->Branch("btoplepm", &btoplepm,  "btoplepm/F");
bin/th_hypotheses_x.cc:    //TTree* otree_bck = otree->CloneTree();
bin/th_hypotheses_x.cc:		      otree->Fill();
bin/th_hypotheses_x.cc:		      otree->Fill();
bin/th_metrecalculator_x.cc:      otree->Branch("met",      &omet,            "met/F");
bin/th_metrecalculator_x.cc:      otree->Branch("metx",     &ometx,          "metx/F");       
bin/th_metrecalculator_x.cc:      otree->Branch("mety",     &omety,          "mety/F");       
bin/th_metrecalculator_x.cc:      UChar_t nlepw={-99};             otree->Branch("nlepw",         &nlepw,                   "nlepw/b");
bin/th_metrecalculator_x.cc:      Float_t lepwm={-99};             otree->Branch("lepwm",         &lepwm,                   "lepwm/F");
bin/th_metrecalculator_x.cc:      Float_t lepwpt={-99};            otree->Branch("lepwpt",        &lepwpt,                 "lepwpt/F");
bin/th_metrecalculator_x.cc:      Float_t lepwphi={-99};           otree->Branch("lepwphi",       &lepwphi,               "lepwphi/F");
bin/th_metrecalculator_x.cc:      Float_t lepweta={-99};           otree->Branch("lepweta",       &lepweta,               "lepweta/F");
bin/th_metrecalculator_x.cc:      Float_t lepwet={-99};            otree->Branch("lepwet",        &lepwet,                 "lepwet/F");
bin/th_metrecalculator_x.cc:      Float_t lepwmt={-99};            otree->Branch("lepwmt",        &lepwmt,                 "lepwmt/F");
bin/th_metrecalculator_x.cc:      Float_t lepwdphi={-99};          otree->Branch("lepwdphi",      &lepwdphi,             "lepwdphi/F");
bin/th_metrecalculator_x.cc:      Float_t sphericity=-99;          otree->Branch("sphericity",    &sphericity,         "sphericity/F");
bin/th_metrecalculator_x.cc:      Float_t aplanarity=-99;          otree->Branch("aplanarity",    &aplanarity,         "aplanarity/F");
bin/th_metrecalculator_x.cc:   	otree->Fill();
bin/th_metrecalculator_x.cc~:      otree->Branch("met",      &omet,            "met/F");
bin/th_metrecalculator_x.cc~:      otree->Branch("metx",     &ometx,          "metx/F");       
bin/th_metrecalculator_x.cc~:      otree->Branch("mety",     &omety,          "mety/F");       
bin/th_metrecalculator_x.cc~:      UChar_t nlepw={-99};             otree->Branch("nlepw",         &nlepw,                   "nlepw/b");
bin/th_metrecalculator_x.cc~:      Float_t lepwm={-99};             otree->Branch("lepwm",         &lepwm,                   "lepwm/F");
bin/th_metrecalculator_x.cc~:      Float_t lepwpt={-99};            otree->Branch("lepwpt",        &lepwpt,                 "lepwpt/F");
bin/th_metrecalculator_x.cc~:      Float_t lepwphi={-99};           otree->Branch("lepwphi",       &lepwphi,               "lepwphi/F");
bin/th_metrecalculator_x.cc~:      Float_t lepweta={-99};           otree->Branch("lepweta",       &lepweta,               "lepweta/F");
bin/th_metrecalculator_x.cc~:      Float_t lepwet={-99};            otree->Branch("lepwet",        &lepwet,                 "lepwet/F");
bin/th_metrecalculator_x.cc~:      Float_t lepwmt={-99};            otree->Branch("lepwmt",        &lepwmt,                 "lepwmt/F");
bin/th_metrecalculator_x.cc~:      Float_t lepwdphi={-99};          otree->Branch("lepwdphi",      &lepwdphi,             "lepwdphi/F");
bin/th_metrecalculator_x.cc~:      Float_t sphericity=-99;          otree->Branch("sphericity",    &sphericity,         "sphericity/F");
bin/th_metrecalculator_x.cc~:      Float_t aplanarity=-99;          otree->Branch("aplanarity",    &aplanarity,         "aplanarity/F");
bin/th_metrecalculator_x.cc~:   	otree->Fill();
bin/th_pileupshift_x.cc:      TBranch* b_weightPU = otree->Branch("weightPU",      &o_weightPU,             "weightPU/F");
bin/th_recexpert_x.cc:  Float_t  best_recbdtout=-99; otree->Branch("best_recbdtout",&best_recbdtout, "best_recbdtout/F");
bin/th_recexpert_x.cc:  Int_t  hyp_posdR=-99;  otree->Branch("hyp_posdR",&hyp_posdR, "hyp_posdR/I");
bin/th_recexpert_x.cc:  Int_t  hyp_posbdt=-99;  otree->Branch("hyp_posbdt",&hyp_posbdt, "hyp_posbdt/I");
bin/th_recexpert_x.cc:  Float_t hbbm=-99;                 otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/th_recexpert_x.cc:  Float_t hbbpt=-99;                otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/th_recexpert_x.cc:  Float_t hbbphi=-99;               otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/th_recexpert_x.cc:  Float_t hbbeta=-99;               otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/th_recexpert_x.cc:  Float_t hbbdr=-99;                otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/th_recexpert_x.cc:  Int_t hbbjtidx[3]={-99,-99,-99};  otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/th_recexpert_x.cc:  Float_t topm=-99;                 otree->Branch("topm",          &topm,                     "topm/F");
bin/th_recexpert_x.cc:  Float_t toppt=-99;                otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/th_recexpert_x.cc:  Float_t topphi=-99;               otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/th_recexpert_x.cc:  Float_t topeta=-99;               otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/th_recexpert_x.cc:  Int_t topjtidx=-99;               otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/th_recexpert_x.cc:  Int_t ljtidx=-99;                 otree->Branch("ljtidx",        &ljtidx,                 "ljtidx/I");
bin/th_recexpert_x.cc:  Float_t costwlt2_rec=-99;         otree->Branch("costwlt2_rec",  &costwlt2_rec,     "costwlt2_rec/F");
bin/th_recexpert_x.cc:    otree->Fill();
bin/th_recexpert_x.cc:  otree->Write();
bin/th_recexpert_x.cc~:  Float_t  best_recbdtout=-99; otree->Branch("best_recbdtout",&best_recbdtout, "best_recbdtout/F");
bin/th_recexpert_x.cc~:  Int_t  hyp_posdR=-99;  otree->Branch("hyp_posdR",&hyp_posdR, "hyp_posdR/I");
bin/th_recexpert_x.cc~:  Int_t  hyp_posbdt=-99;  otree->Branch("hyp_posbdt",&hyp_posbdt, "hyp_posbdt/I");
bin/th_recexpert_x.cc~:  Float_t hbbm=-99;                 otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/th_recexpert_x.cc~:  Float_t hbbpt=-99;                otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/th_recexpert_x.cc~:  Float_t hbbphi=-99;               otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/th_recexpert_x.cc~:  Float_t hbbeta=-99;               otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/th_recexpert_x.cc~:  Float_t hbbdr=-99;                otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/th_recexpert_x.cc~:  Int_t hbbjtidx[3]={-99,-99,-99};  otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/th_recexpert_x.cc~:  Float_t topm=-99;                 otree->Branch("topm",          &topm,                     "topm/F");
bin/th_recexpert_x.cc~:  Float_t toppt=-99;                otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/th_recexpert_x.cc~:  Float_t topphi=-99;               otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/th_recexpert_x.cc~:  Float_t topeta=-99;               otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/th_recexpert_x.cc~:  Int_t topjtidx=-99;               otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/th_recexpert_x.cc~:  Int_t ljtidx=-99;                 otree->Branch("ljtidx",        &ljtidx,                 "ljtidx/I");
bin/th_recexpert_x.cc~:  Float_t costwlt2_rec=-99;         otree->Branch("costwlt2_rec",  &costwlt2_rec,     "costwlt2_rec/F");
bin/th_recexpert_x.cc~:    otree->Fill();
bin/th_recexpert_x.cc~:  otree->Write();
bin/th_recexpertpop_x.cc:  Float_t  best_recbdtout=-99; otree->Branch("best_recbdtout",&best_recbdtout, "best_recbdtout/F");
bin/th_recexpertpop_x.cc:  Int_t  hyp_posdR=-99;  otree->Branch("hyp_posdR",&hyp_posdR, "hyp_posdR/I");
bin/th_recexpertpop_x.cc:  Int_t  hyp_posbdt=-99;  otree->Branch("hyp_posbdt",&hyp_posbdt, "hyp_posbdt/I");
bin/th_recexpertpop_x.cc:  Float_t hbbm=-99;                 otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/th_recexpertpop_x.cc:  Float_t hbbpt=-99;                otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/th_recexpertpop_x.cc:  Float_t hbbphi=-99;               otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/th_recexpertpop_x.cc:  Float_t hbbeta=-99;               otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/th_recexpertpop_x.cc:  Float_t hbbdr=-99;                otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/th_recexpertpop_x.cc:  Int_t hbbjtidx[3]={-99,-99,-99};  otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/th_recexpertpop_x.cc:  Float_t topm=-99;                 otree->Branch("topm",          &topm,                     "topm/F");
bin/th_recexpertpop_x.cc:  Float_t toppt=-99;                otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/th_recexpertpop_x.cc:  Float_t topphi=-99;               otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/th_recexpertpop_x.cc:  Float_t topeta=-99;               otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/th_recexpertpop_x.cc:  Int_t topjtidx=-99;               otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/th_recexpertpop_x.cc:  Int_t ljtidx=-99;                 otree->Branch("ljtidx",        &ljtidx,                 "ljtidx/I");
bin/th_recexpertpop_x.cc:  Float_t coststh_rec=-99;             otree->Branch("coststh_rec",        &coststh_rec,               "coststh_rec/F");
bin/th_recexpertpop_x.cc:    otree->Fill();
bin/th_recexpertpop_x.cc:  otree->Write();
bin/th_recexpertpop_x.cc~:  Float_t  best_recbdtout=-99; otree->Branch("best_recbdtout",&best_recbdtout, "best_recbdtout/F");
bin/th_recexpertpop_x.cc~:  Int_t  hyp_posdR=-99;  otree->Branch("hyp_posdR",&hyp_posdR, "hyp_posdR/I");
bin/th_recexpertpop_x.cc~:  Int_t  hyp_posbdt=-99;  otree->Branch("hyp_posbdt",&hyp_posbdt, "hyp_posbdt/I");
bin/th_recexpertpop_x.cc~:  Float_t hbbm=-99;                 otree->Branch("hbbm",          &hbbm,                     "hbbm/F");
bin/th_recexpertpop_x.cc~:  Float_t hbbpt=-99;                otree->Branch("hbbpt",         &hbbpt,                   "hbbpt/F");
bin/th_recexpertpop_x.cc~:  Float_t hbbphi=-99;               otree->Branch("hbbphi",        &hbbphi,                 "hbbphi/F");
bin/th_recexpertpop_x.cc~:  Float_t hbbeta=-99;               otree->Branch("hbbeta",        &hbbeta,                 "hbbeta/F");
bin/th_recexpertpop_x.cc~:  Float_t hbbdr=-99;                otree->Branch("hbbdr",         &hbbdr,                   "hbbdr/F");
bin/th_recexpertpop_x.cc~:  Int_t hbbjtidx[3]={-99,-99,-99};  otree->Branch("hbbjtidx",      hbbjtidx,           "hbbjtidx[3]/I");
bin/th_recexpertpop_x.cc~:  Float_t topm=-99;                 otree->Branch("topm",          &topm,                     "topm/F");
bin/th_recexpertpop_x.cc~:  Float_t toppt=-99;                otree->Branch("toppt",         &toppt,                   "toppt/F");
bin/th_recexpertpop_x.cc~:  Float_t topphi=-99;               otree->Branch("topphi",        &topphi,                 "topphi/F");
bin/th_recexpertpop_x.cc~:  Float_t topeta=-99;               otree->Branch("topeta",        &topeta,                 "topeta/F");
bin/th_recexpertpop_x.cc~:  Int_t topjtidx=-99;               otree->Branch("topjtidx",      &topjtidx,             "topjtidx/I");
bin/th_recexpertpop_x.cc~:  Int_t ljtidx=-99;                 otree->Branch("ljtidx",        &ljtidx,                 "ljtidx/I");
bin/th_recexpertpop_x.cc~:  Float_t coststh_rec=-99;             otree->Branch("coststh_rec",        &coststh_rec,               "coststh_rec/F");
bin/th_recexpertpop_x.cc~:    otree->Fill();
bin/th_recexpertpop_x.cc~:  otree->Write();
bin/th_regexpert_x.cc:   Float_t o_jtpt[140];       TBranch* b_jtpt      = otree->Branch("jtpt", o_jtpt, "jtpt[njt]/F");
bin/th_regexpert_x.cc:   Float_t o_jte[140];        TBranch* b_jte       = otree->Branch("jte", o_jte, "jte[njt]/F");
bin/th_regexpert_x.cc:   Float_t o_jtcorrfac[3]={0.,0.,0.};    TBranch* b_jtcorrfac = otree->Branch("jtcorrfac", o_jtcorrfac, "jtcorrfac[3]/F"); 
bin/th_regexpert_x.cc:   Float_t o_hbbpt;           TBranch* b_hbbpt     = otree->Branch("hbbpt", &o_hbbpt, "hbbpt/F");
bin/th_regexpert_x.cc:   Float_t o_hbbm;            TBranch* b_hbbm      = otree->Branch("hbbm", &o_hbbm, "hbbm/F");
bin/th_regexpert_x.cc:   Float_t o_hbbe;            TBranch* b_hbbe      = otree->Branch("hbbe", &o_hbbe, "hbbe/F");
bin/th_regexpert_x.cc:   Float_t o_toppt;           TBranch* b_toppt     = otree->Branch("toppt", &o_toppt, "toppt/F");
bin/th_regexpert_x.cc:   Float_t o_topm;            TBranch* b_topm      = otree->Branch("topm", &o_topm, "topm/F");
bin/th_regexpert_x.cc:   Float_t o_tope;            TBranch* b_tope      = otree->Branch("tope", &o_tope, "tope/F");
bin/th_regexpert_x.cc:      otree->Fill();
bin/th_regexpert_x.cc:   cout << "Wrote " << otree->GetEntries() << " in new tree\n";
bin/th_regexpert_x.cc:   otree->Write();
bin/th_regprepare_x.cc:    Float_t o_jtpt;            TBranch* b_jtpt =         otree->Branch("jtpt", &o_jtpt, "jtpt/F");
bin/th_regprepare_x.cc:    Float_t o_jtgenpt;         TBranch* b_jtgenpt =      otree->Branch("jtgenpt", &o_jtgenpt, "jtgenpt/F");
bin/th_regprepare_x.cc:    Float_t o_jtrawpt;         TBranch* b_jtrawpt =      otree->Branch("jtrawpt", &o_jtrawpt, "jtrawpt/F");
bin/th_regprepare_x.cc:    Float_t o_jteta;           TBranch* b_jteta =        otree->Branch("jteta", &o_jteta, "jteta/F");
bin/th_regprepare_x.cc:    Float_t o_jte;             TBranch* b_jte =          otree->Branch("jte", &o_jte, "jte/F");
bin/th_regprepare_x.cc:    Float_t o_jtntracks;       TBranch* b_jtntracks =    otree->Branch("jtntracks", &o_jtntracks, "jtntracks/F");
bin/th_regprepare_x.cc:    Float_t o_jtarea;          TBranch* b_jtarea =       otree->Branch("jtarea", &o_jtarea, "jtarea/F");
bin/th_regprepare_x.cc:    Float_t o_jtcharge;        TBranch* b_jtcharge =     otree->Branch("jtcharge", &o_jtcharge, "jtcharge/F");
bin/th_regprepare_x.cc:    Float_t o_jtchhadmult;     TBranch* b_jtchhadmult =  otree->Branch("jtchhadmult", &o_jtchhadmult,"jtchhadmult/F");
bin/th_regprepare_x.cc:    Float_t o_jtcsvt;          TBranch* b_jtcsvt =       otree->Branch("jtcsvt", &o_jtcsvt, "jtcsvt/F");
bin/th_regprepare_x.cc:    Int_t evt=0;               TBranch* b_evt =              otree->Branch("evt", &evt,  "evt/I");
bin/th_regprepare_x.cc:	      otree->Fill();
bin/th_regprepare_x.cc:	      otree->Fill();
bin/th_scalejer_x.cc:      TBranch* b_jtpt    = otree->Branch("jtpt",     ojtpt,     "jtpt[njt]/F");
bin/th_scalejer_x.cc:      TBranch* b_jte     = otree->Branch("jte",      ojte,      "jte[njt]/F");       
bin/th_scalejer_x.cc:      TBranch* b_jtm     = otree->Branch("jtm",      ojtm,      "jtm[njt]/F");       
bin/th_scalejer_x.cc:      //if (doHBB) b_hbbm  = otree->Branch("hbbm",    &ohbbm,     "hbbm/F");       
bin/th_scalejer_x.cc:      //if (doHBB) b_hbbpt = otree->Branch("hbbpt",   &ohbbpt,    "hbbpt/F");  
bin/th_scalejer_x.cc~:      TBranch* b_jtpt    = otree->Branch("jtpt",     ojtpt,     "jtpt[njt]/F");
bin/th_scalejer_x.cc~:      TBranch* b_jte     = otree->Branch("jte",      ojte,      "jte[njt]/F");       
bin/th_scalejer_x.cc~:      TBranch* b_jtm     = otree->Branch("jtm",      ojtm,      "jtm[njt]/F");       
bin/th_scalejer_x.cc~:      //if (doHBB) b_hbbm  = otree->Branch("hbbm",    &ohbbm,     "hbbm/F");       
bin/th_scalejer_x.cc~:      //if (doHBB) b_hbbpt = otree->Branch("hbbpt",   &ohbbpt,    "hbbpt/F");  
bin/th_scalejes_x.cc:      TBranch* b_jtpt    = otree->Branch("jtpt",     ojtpt,     "jtpt[njt]/F");
bin/th_scalejes_x.cc:      TBranch* b_jte     = otree->Branch("jte",      ojte,      "jte[njt]/F");       
bin/th_scalejes_x.cc:      TBranch* b_jtm     = otree->Branch("jtm",      ojtm,      "jtm[njt]/F");       
bin/th_scalejes_x.cc:      TBranch* b_jtjes   = otree->Branch("jtjes",    ojtjes,    "jtjes[njt]/F"); 
bin/th_scalejes_x.cc~:      TBranch* b_jtpt    = otree->Branch("jtpt",     ojtpt,     "jtpt[njt]/F");
bin/th_scalejes_x.cc~:      TBranch* b_jte     = otree->Branch("jte",      ojte,      "jte[njt]/F");       
bin/th_scalejes_x.cc~:      TBranch* b_jtm     = otree->Branch("jtm",      ojtm,      "jtm[njt]/F");       
bin/th_scalejes_x.cc~:      TBranch* b_jtjes   = otree->Branch("jtjes",    ojtjes,    "jtjes[njt]/F"); 
bin/th_skim_x.cc:	double nselected  = (double)otree->GetEntries();
bin/th_skim_x.cc:	otree->GetUserInfo()->Add(new TObjString(ss.str().c_str()));
bin/th_skim_x.cc:	otree->Write();
bin/th_skim_x.cc:	if (rrm.contains(run,lbn)) otree->Fill();
bin/th_skim_x.cc:      otree->Write();
bin/th_skim_x.cc:      cout<<dirname<<": "<<otree->GetEntries()<<" / "<<itree->GetEntries()<<endl;
bin/th_tophypotheses_x.cc:    ULong64_t evt=-99;               otree->Branch("evt",           &evt,                       "evt/l");
bin/th_tophypotheses_x.cc:    Int_t   hyp_isbest=-1;           otree->Branch("hyp_isbest",    &hyp_isbest,         "hyp_isbest/I");
bin/th_tophypotheses_x.cc:    Float_t hyp_weight=1.;           otree->Branch("hyp_weight",    &hyp_weight,         "hyp_weight/F");
bin/th_tophypotheses_x.cc:    Float_t hyp_deltaRrel[4]={-99};  otree->Branch("hyp_deltaRrel", hyp_deltaRrel, "hyp_deltaRrel[4]/F");    
bin/th_tophypotheses_x.cc:    Float_t tophadwm=-99;                otree->Branch("tophadwm",          &tophadwm,                     "tophadwm/F");
bin/th_tophypotheses_x.cc:    Float_t tophadwpt=-99;               otree->Branch("tophadwpt",         &tophadwpt,                   "tophadwpt/F");
bin/th_tophypotheses_x.cc:    Float_t tophadwphi=-99;              otree->Branch("tophadwphi",        &tophadwphi,                 "tophadwphi/F");
bin/th_tophypotheses_x.cc:    Float_t tophadweta=-99;              otree->Branch("tophadweta",        &tophadweta,                 "tophadweta/F");
bin/th_tophypotheses_x.cc:    Float_t tophadm=-99;                otree->Branch("tophadm",          &tophadm,                     "tophadm/F");
bin/th_tophypotheses_x.cc:    Float_t tophadpt=-99;               otree->Branch("tophadpt",         &tophadpt,                   "tophadpt/F");
bin/th_tophypotheses_x.cc:    Float_t tophadphi=-99;              otree->Branch("tophadphi",        &tophadphi,                 "tophadphi/F");
bin/th_tophypotheses_x.cc:    Float_t tophadeta=-99;              otree->Branch("tophadeta",        &tophadeta,                 "tophadeta/F");
bin/th_tophypotheses_x.cc:    Float_t tophaddr=-99;               otree->Branch("tophaddr",         &tophaddr,                   "tophaddr/F");
bin/th_tophypotheses_x.cc:    Int_t tophadjtidx[3]={-99,-99,-99}; otree->Branch("tophadjtidx",      tophadjtidx,           "tophadjtidx[3]/I");
bin/th_tophypotheses_x.cc:    Int_t tophadjtidx_1 = -99;          otree->Branch("tophadjtidx_1",    &tophadjtidx_1,          "tophadjtidx_1/I");
bin/th_tophypotheses_x.cc:    Int_t tophadjtidx_2 = -99;          otree->Branch("tophadjtidx_2",    &tophadjtidx_2,          "tophadjtidx_2/I");
bin/th_tophypotheses_x.cc:    Int_t tophadjtidx_3 = -99;          otree->Branch("tophadjtidx_3",    &tophadjtidx_3,         "tophadjtidx_3/I");
bin/th_tophypotheses_x.cc:    Float_t toplepm=-99;                otree->Branch("toplepm",          &toplepm,                     "toplepm/F");
bin/th_tophypotheses_x.cc:    Float_t topleppt=-99;               otree->Branch("topleppt",         &topleppt,                   "topleppt/F");
bin/th_tophypotheses_x.cc:    Float_t toplepphi=-99;              otree->Branch("toplepphi",        &toplepphi,                 "toplepphi/F");
bin/th_tophypotheses_x.cc:    Float_t toplepeta=-99;              otree->Branch("toplepeta",        &toplepeta,                 "toplepeta/F");
bin/th_tophypotheses_x.cc:    Int_t toplepjtidx=-99;              otree->Branch("toplepjtidx",      &toplepjtidx,             "toplepjtidx/I");
bin/th_tophypotheses_x.cc:    //TTree* otree_bck = otree->CloneTree();
bin/th_tophypotheses_x.cc:		    otree->Fill();
bin/th_toppt_x.cc:      TBranch* b_weight_toppt        =otree->Branch("weight_toppt",      &weight_toppt,           "weight_toppt/F");
bin/th_toprecexpert_x.cc:  Float_t  top_best_recbdtout=-99; otree->Branch("top_best_recbdtout",&top_best_recbdtout, "top_best_recbdtout/F");
bin/th_toprecexpert_x.cc:  Int_t  top_hyp_posdR=-99;  otree->Branch("top_hyp_posdR",&top_hyp_posdR, "top_hyp_posdR/I");
bin/th_toprecexpert_x.cc:  Int_t  top_hyp_posbdt=-99;  otree->Branch("top_hyp_posbdt",&top_hyp_posbdt, "top_hyp_posbdt/I");
bin/th_toprecexpert_x.cc:  Float_t tophadwm=-99;                otree->Branch("tophadwm",          &tophadwm,                     "tophadwm/F");
bin/th_toprecexpert_x.cc:  Float_t tophadwpt=-99;               otree->Branch("tophadwpt",         &tophadwpt,                   "tophadwpt/F");
bin/th_toprecexpert_x.cc:  Float_t tophadwphi=-99;              otree->Branch("tophadwphi",        &tophadwphi,                 "tophadwphi/F");
bin/th_toprecexpert_x.cc:  Float_t tophadweta=-99;              otree->Branch("tophadweta",        &tophadweta,                 "tophadweta/F");
bin/th_toprecexpert_x.cc:  Float_t tophadm=-99;                 otree->Branch("tophadm",          &tophadm,                     "tophadm/F");
bin/th_toprecexpert_x.cc:  Float_t tophadpt=-99;                otree->Branch("tophadpt",         &tophadpt,                   "tophadpt/F");
bin/th_toprecexpert_x.cc:  Float_t tophadphi=-99;               otree->Branch("tophadphi",        &tophadphi,                 "tophadphi/F");
bin/th_toprecexpert_x.cc:  Float_t tophadeta=-99;               otree->Branch("tophadeta",        &tophadeta,                 "tophadeta/F");
bin/th_toprecexpert_x.cc:  Float_t tophaddr=-99;                otree->Branch("tophaddr",         &tophaddr,                   "tophaddr/F");
bin/th_toprecexpert_x.cc:  Int_t tophadjtidx[3]={-99,-99,-99};  otree->Branch("tophadjtidx",      tophadjtidx,           "tophadjtidx[3]/I");
bin/th_toprecexpert_x.cc:  Float_t toplepm=-99;                otree->Branch("toplepm",          &toplepm,                     "toplepm/F");
bin/th_toprecexpert_x.cc:  Float_t topleppt=-99;               otree->Branch("topleppt",         &topleppt,                   "topleppt/F");
bin/th_toprecexpert_x.cc:  Float_t toplepphi=-99;              otree->Branch("toplepphi",        &toplepphi,                 "toplepphi/F");
bin/th_toprecexpert_x.cc:  Float_t toplepeta=-99;              otree->Branch("toplepeta",        &toplepeta,                 "toplepeta/F");
bin/th_toprecexpert_x.cc:  Int_t toplepjtidx=-99;              otree->Branch("toplepjtidx",      &toplepjtidx,             "toplepjtidx/I");
bin/th_toprecexpert_x.cc:    otree->Fill();
bin/th_toprecexpert_x.cc:  otree->Write();
bin/th_toprecexpertpop_x.cc:  Float_t  top_best_recbdtout=-99; otree->Branch("top_best_recbdtout",&top_best_recbdtout, "top_best_recbdtout/F");
bin/th_toprecexpertpop_x.cc:  Int_t  top_hyp_posdR=-99;  otree->Branch("top_hyp_posdR",&top_hyp_posdR, "top_hyp_posdR/I");
bin/th_toprecexpertpop_x.cc:  Int_t  top_hyp_posbdt=-99;  otree->Branch("top_hyp_posbdt",&top_hyp_posbdt, "top_hyp_posbdt/I");
bin/th_toprecexpertpop_x.cc:  Float_t tophadwm=-99;                otree->Branch("tophadwm",          &tophadwm,                     "tophadwm/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadwpt=-99;               otree->Branch("tophadwpt",         &tophadwpt,                   "tophadwpt/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadwphi=-99;              otree->Branch("tophadwphi",        &tophadwphi,                 "tophadwphi/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadweta=-99;              otree->Branch("tophadweta",        &tophadweta,                 "tophadweta/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadm=-99;                 otree->Branch("tophadm",          &tophadm,                     "tophadm/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadpt=-99;                otree->Branch("tophadpt",         &tophadpt,                   "tophadpt/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadphi=-99;               otree->Branch("tophadphi",        &tophadphi,                 "tophadphi/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophadeta=-99;               otree->Branch("tophadeta",        &tophadeta,                 "tophadeta/F");
bin/th_toprecexpertpop_x.cc:  Float_t tophaddr=-99;                otree->Branch("tophaddr",         &tophaddr,                   "tophaddr/F");
bin/th_toprecexpertpop_x.cc:  Int_t tophadjtidx[3]={-99,-99,-99};  otree->Branch("tophadjtidx",      tophadjtidx,           "tophadjtidx[3]/I");
bin/th_toprecexpertpop_x.cc:  Float_t toplepm=-99;                otree->Branch("toplepm",          &toplepm,                     "toplepm/F");
bin/th_toprecexpertpop_x.cc:  Float_t topleppt=-99;               otree->Branch("topleppt",         &topleppt,                   "topleppt/F");
bin/th_toprecexpertpop_x.cc:  Float_t toplepphi=-99;              otree->Branch("toplepphi",        &toplepphi,                 "toplepphi/F");
bin/th_toprecexpertpop_x.cc:  Float_t toplepeta=-99;              otree->Branch("toplepeta",        &toplepeta,                 "toplepeta/F");
bin/th_toprecexpertpop_x.cc:  Int_t toplepjtidx=-99;              otree->Branch("toplepjtidx",      &toplepjtidx,             "toplepjtidx/I");
bin/th_toprecexpertpop_x.cc:    otree->Fill();
bin/th_toprecexpertpop_x.cc:  otree->Write();
bin/th_toprecexpertpop_x.cc~:  Float_t  top_best_recbdtout=-99; otree->Branch("top_best_recbdtout",&top_best_recbdtout, "top_best_recbdtout/F");
bin/th_toprecexpertpop_x.cc~:  Int_t  top_hyp_posdR=-99;  otree->Branch("top_hyp_posdR",&top_hyp_posdR, "top_hyp_posdR/I");
bin/th_toprecexpertpop_x.cc~:  Int_t  top_hyp_posbdt=-99;  otree->Branch("top_hyp_posbdt",&top_hyp_posbdt, "top_hyp_posbdt/I");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadwm=-99;                otree->Branch("tophadwm",          &tophadwm,                     "tophadwm/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadwpt=-99;               otree->Branch("tophadwpt",         &tophadwpt,                   "tophadwpt/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadwphi=-99;              otree->Branch("tophadwphi",        &tophadwphi,                 "tophadwphi/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadweta=-99;              otree->Branch("tophadweta",        &tophadweta,                 "tophadweta/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadm=-99;                 otree->Branch("tophadm",          &tophadm,                     "tophadm/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadpt=-99;                otree->Branch("tophadpt",         &tophadpt,                   "tophadpt/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadphi=-99;               otree->Branch("tophadphi",        &tophadphi,                 "tophadphi/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophadeta=-99;               otree->Branch("tophadeta",        &tophadeta,                 "tophadeta/F");
bin/th_toprecexpertpop_x.cc~:  Float_t tophaddr=-99;                otree->Branch("tophaddr",         &tophaddr,                   "tophaddr/F");
bin/th_toprecexpertpop_x.cc~:  Int_t tophadjtidx[3]={-99,-99,-99};  otree->Branch("tophadjtidx",      tophadjtidx,           "tophadjtidx[3]/I");
bin/th_toprecexpertpop_x.cc~:  Float_t toplepm=-99;                otree->Branch("toplepm",          &toplepm,                     "toplepm/F");
bin/th_toprecexpertpop_x.cc~:  Float_t topleppt=-99;               otree->Branch("topleppt",         &topleppt,                   "topleppt/F");
bin/th_toprecexpertpop_x.cc~:  Float_t toplepphi=-99;              otree->Branch("toplepphi",        &toplepphi,                 "toplepphi/F");
bin/th_toprecexpertpop_x.cc~:  Float_t toplepeta=-99;              otree->Branch("toplepeta",        &toplepeta,                 "toplepeta/F");
bin/th_toprecexpertpop_x.cc~:  Int_t toplepjtidx=-99;              otree->Branch("toplepjtidx",      &toplepjtidx,             "toplepjtidx/I");
bin/th_toprecexpertpop_x.cc~:    otree->Fill();
bin/th_toprecexpertpop_x.cc~:  otree->Write();
